"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandWarningsEvent = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = exports.CommandEvent = void 0;
const lib_1 = require("../lib");
// import { DataAPIClientEvent } from '../lib/logging/events'; needs to be like this or it errors
const events_1 = require("../lib/logging/events");
class CommandEvent extends events_1.DataAPIClientEvent {
        constructor(name, info) {
        super(name);
                Object.defineProperty(this, "command", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "keyspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "source", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "commandName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.command = info.command;
        this.keyspace = info.keyspace || lib_1.DEFAULT_KEYSPACE;
        this.source = info.collection;
        this.commandName = Object.keys(info.command)[0];
        this.url = info.url;
    }
        _desc() {
        return `(${this.keyspace}${this.source ? `.${this.source}` : ''}) ${this.commandName}`;
    }
}
exports.CommandEvent = CommandEvent;
class CommandStartedEvent extends CommandEvent {
        constructor(info) {
        super('CommandStarted', info);
                Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.timeout = info.timeoutManager.initial();
    }
        formatted() {
        // return `${super.formatted()}: ${this.commandName} in ${this.keyspace}${this.source ? `.${this.source}` : ''}`;
        return `${super.formatted()}: ${this._desc()}`;
    }
}
exports.CommandStartedEvent = CommandStartedEvent;
class CommandSucceededEvent extends CommandEvent {
        constructor(info, reply, started) {
        super('CommandSucceeded', info);
                Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "resp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.duration = performance.now() - started;
        this.resp = reply;
    }
        formatted() {
        return `${super.formatted()}: ${this._desc()} (took ${~~this.duration}ms)`;
    }
}
exports.CommandSucceededEvent = CommandSucceededEvent;
class CommandFailedEvent extends CommandEvent {
        constructor(info, error, started) {
        super('CommandFailed', info);
                Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.duration = performance.now() - started;
        this.error = error;
    }
        formatted() {
        return `${super.formatted()}: ${this._desc()} (took ${~~this.duration}ms) - '${this.error.message}'`;
    }
}
exports.CommandFailedEvent = CommandFailedEvent;
class CommandWarningsEvent extends CommandEvent {
        constructor(info, warnings) {
        super('CommandWarnings', info);
                Object.defineProperty(this, "warnings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.warnings = warnings;
    }
        formatted() {
        return `${super.formatted()}: ${this._desc()} '${this.warnings.map(w => w.message).join(', ')}'`;
    }
}
exports.CommandWarningsEvent = CommandWarningsEvent;
