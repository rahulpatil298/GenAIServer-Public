"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizedSort = void 0;
exports.extractDbIdFromUrl = extractDbIdFromUrl;
exports.extractRegionFromUrl = extractRegionFromUrl;
exports.replaceAstraUrlIdAndRegion = replaceAstraUrlIdAndRegion;
const datatypes_1 = require("../documents/datatypes");
const documents_1 = require("../documents");
function extractDbIdFromUrl(uri) {
    return new URL(uri).hostname.match(/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/)?.[0];
}
function extractRegionFromUrl(uri) {
    return new URL(uri).hostname.split('-').slice(5).join('-').split('.')[0];
}
function replaceAstraUrlIdAndRegion(uri, id, region) {
    const url = new URL(uri);
    const parts = url.hostname.split('.');
    parts[0] = id + '-' + region;
    url.hostname = parts.join('.');
    return url.toString().slice(0, -1);
}
const normalizedSort = (sort) => {
    const ret = {};
    for (const key in sort) {
        const val = sort[key];
        if (val instanceof datatypes_1.DataAPIVector) {
            ret[key] = val[documents_1.$SerializeForTable]({ done: (x) => [x, true] })[0];
        }
        else {
            ret[key] = val;
        }
    }
    return ret;
};
exports.normalizedSort = normalizedSort;
