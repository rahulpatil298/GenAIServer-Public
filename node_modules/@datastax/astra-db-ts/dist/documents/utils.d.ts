import type { SomeDoc } from '../documents/collections';
import type { Sort } from '../documents/types';
declare const $ERROR: unique symbol;
/**
 * Represents some type-level error which forces immediate attention rather than failing at runtime.
 *
 * More inflexable type than `never`, and gives contextual error messages.
 *
 * @example
 * ```typescript
 * function unsupported(): TypeErr<'Unsupported operation'> {
 * Â  throw new Error('Unsupported operation');
 * }
 *
 * // Doesn't compile with error:
 * // Type TypeErr<'Unsupported operation'> is not assignable to type string
 * const result: string = unsupported();
 * ```
 *
 * @public
 */
export type TypeErr<S> = {
    [$ERROR]: S;
};
/**
 * @internal
 */
export declare function extractDbIdFromUrl(uri: string): string | undefined;
/**
 * @internal
 */
export declare function extractRegionFromUrl(uri: string): string | undefined;
/**
 * @internal
 */
export declare function replaceAstraUrlIdAndRegion(uri: string, id: string, region: string): string;
/**
 * @internal
 */
export declare const normalizedSort: (sort: SomeDoc) => Sort;
export {};
