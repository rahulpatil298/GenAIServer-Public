import { TableCodec, TableDesCtx, TableSerCtx } from '../../documents';
import { $DeserializeForTable, $SerializeForTable } from '../../documents/tables/ser-des/constants';
/**
 * Represents any type that can be converted into a {@link DataAPIBlob}
 *
 * @public
 */
export type DataAPIBlobLike = DataAPIBlob | ArrayBuffer | Buffer | {
    $binary: string;
};
/**
 * A shorthand function for `new DataAPIBlob(blob)`
 *
 * @public
 */
export declare const blob: (blob: DataAPIBlobLike) => DataAPIBlob;
/**
 * Represents a `blob` column for Data API tables.
 *
 * See {@link DataAPIBlobLike} for the types that can be converted into a `DataAPIBlob`.
 *
 * You may use the {@link blob} function as a shorthand for creating a new `DataAPIBlob`.
 *
 * See the official DataStax documentation for more information.
 *
 * @public
 */
export declare class DataAPIBlob implements TableCodec<typeof DataAPIBlob> {
    #private;
    /**
     * Implementation of `$SerializeForTable` for {@link TableCodec}
     */
    [$SerializeForTable](ctx: TableSerCtx): readonly [0, ({
        $binary: string;
    } | undefined)?];
    /**
     * Implementation of `$DeserializeForTable` for {@link TableCodec}
     */
    static [$DeserializeForTable](value: any, ctx: TableDesCtx): readonly [0, (DataAPIBlob | undefined)?];
    /**
     * Creates a new `DataAPIBlob` instance from a blob-like value.
     *
     * You can set `validate` to `false` to bypass any validation if you're confident the value is a valid blob.
     *
     * @param blob - The blob-like value to convert to a `DataAPIBlob`
     * @param validate - Whether to validate the blob-like value (default: `true`)
     *
     * @throws TypeError If `blob` is not a valid blob-like value
     */
    constructor(blob: DataAPIBlobLike, validate?: boolean);
    /**
     * Gets the byte length of the blob, agnostic of the underlying type.
     *
     * @returns The byte length of the blob
     */
    get byteLength(): number;
    /**
     * Gets the raw underlying implementation of the blob.
     *
     * @returns The raw blob
     */
    raw(): Exclude<DataAPIBlobLike, DataAPIBlob>;
    /**
     * Returns the blob as an `ArrayBuffer`, converting between types if necessary.
     *
     * @returns The blob as an `ArrayBuffer`
     */
    asArrayBuffer(): ArrayBuffer;
    /**
     * Returns the blob as a `Buffer`, if available, converting between types if necessary.
     *
     * @returns The blob as a `Buffer`
     */
    asBuffer(): Buffer;
    /**
     * Returns the blob as a base64 string, converting between types if necessary.
     *
     * @returns The blob as a base64 string
     */
    asBase64(): string;
    /**
     * Returns a pretty string representation of the `DataAPIBlob`.
     */
    toString(): string;
    /**
     * Determines whether the given value is a blob-like value (i.e. it's {@link DataAPIBlobLike}.
     *
     * @param value - The value to check
     *
     * @returns `true` if the value is a blob-like value; `false` otherwise
     */
    static isBlobLike(value: unknown): value is DataAPIBlobLike;
}
