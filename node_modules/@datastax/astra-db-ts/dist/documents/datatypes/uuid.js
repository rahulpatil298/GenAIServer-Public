"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _UUID_raw;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UUID = exports.uuid = void 0;
const uuidv7_1 = require("uuidv7");
const constants_1 = require("../../lib/constants");
const constants_2 = require("../../documents/collections/ser-des/constants");
const constants_3 = require("../../documents/tables/ser-des/constants");
const uuidRegex = new RegExp('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$');
const uuid = (uuid) => (typeof uuid === 'string')
    ? new UUID(uuid) :
    (uuid === 7)
        ? UUID.v7()
        : UUID.v4();
exports.uuid = uuid;
class UUID {
        [(_UUID_raw = new WeakMap(), constants_3.$SerializeForTable)](ctx) {
        return ctx.done(__classPrivateFieldGet(this, _UUID_raw, "f"));
    }
    ;
        [constants_2.$SerializeForCollection](ctx) {
        return ctx.done({ $uuid: __classPrivateFieldGet(this, _UUID_raw, "f") });
    }
    ;
        static [constants_3.$DeserializeForTable](value, ctx) {
        return ctx.done(new UUID(value, false));
    }
        static [constants_2.$DeserializeForCollection](_, value, ctx) {
        return ctx.done(new UUID(value.$uuid, false));
    }
        constructor(uuid, validate = true) {
                Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        _UUID_raw.set(this, void 0);
        if (validate) {
            if (typeof uuid !== 'string') {
                throw new Error('UUID must be a string');
            }
            if (uuid.length !== 36 || !uuidRegex.test(uuid)) {
                throw new Error('UUID must be a 36-character hex string');
            }
        }
        __classPrivateFieldSet(this, _UUID_raw, uuid.toLowerCase(), "f");
        Object.defineProperty(this, 'version', {
            value: parseInt(__classPrivateFieldGet(this, _UUID_raw, "f")[14], 16),
        });
        Object.defineProperty(this, constants_1.$CustomInspect, {
            value: () => `UUID<${this.version}>("${__classPrivateFieldGet(this, _UUID_raw, "f")}")`,
        });
    }
        equals(other) {
        if (typeof other === 'string') {
            return __classPrivateFieldGet(this, _UUID_raw, "f") === other.toLowerCase();
        }
        if (other instanceof UUID) {
            return __classPrivateFieldGet(this, _UUID_raw, "f") === __classPrivateFieldGet(other, _UUID_raw, "f");
        }
        return false;
    }
        getTimestamp() {
        return timestampFromUUID(this);
    }
        toString() {
        return __classPrivateFieldGet(this, _UUID_raw, "f");
    }
        static v4() {
        return new UUID((0, uuidv7_1.uuidv4)(), false);
    }
        static v7() {
        return new UUID((0, uuidv7_1.uuidv7)(), false);
    }
}
exports.UUID = UUID;
function timestampFromUUID(uuid) {
    if (uuid.version !== 7) {
        return undefined;
    }
    const timestampBytes = new Uint8Array(8);
    timestampBytes.set(new Uint8Array(uuidv7_1.UUID.parse(uuid.toString()).bytes.buffer.slice(0, 6)), 2);
    const timestampMs = new DataView(timestampBytes.buffer).getBigUint64(0);
    return new Date(Number(timestampMs));
}
