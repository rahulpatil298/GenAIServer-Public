"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DataAPIDate_date, _DataAPIDuration_duration, _a, _DataAPITime_time, _DataAPITime_initTime, _DataAPITimestamp_timestamp;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAPITimestamp = exports.timestamp = exports.DataAPITime = exports.time = exports.DataAPIDuration = exports.duration = exports.DataAPIDate = exports.date = void 0;
const utils_1 = require("../../lib/utils");
const constants_1 = require("../../lib/constants");
const constants_2 = require("../../documents/collections/ser-des/constants");
const constants_3 = require("../../documents/tables/ser-des/constants");
const date = (date) => new DataAPIDate(date);
exports.date = date;
class DataAPIDate {
        [(_DataAPIDate_date = new WeakMap(), constants_3.$SerializeForTable)](ctx) {
        return ctx.done(this.toString());
    }
    ;
        static [constants_3.$DeserializeForTable](value, ctx) {
        return ctx.done(new DataAPIDate(value));
    }
        constructor(input) {
        _DataAPIDate_date.set(this, void 0);
        if (typeof input === 'string') {
            __classPrivateFieldSet(this, _DataAPIDate_date, input, "f");
        }
        else if (input instanceof Date || (0, utils_1.isNullish)(input)) {
            input || (input = new Date());
            __classPrivateFieldSet(this, _DataAPIDate_date, `${input.getFullYear().toString().padStart(4, '0')}-${(input.getMonth() + 1).toString().padStart(2, '0')}-${input.getDate().toString().padStart(2, '0')}`, "f");
        }
        else {
            if (input.month < 1 || input.month > 12) {
                throw new RangeError('Month must be between 1 and 12 (DataAPIDate month is NOT zero-indexed)');
            }
            __classPrivateFieldSet(this, _DataAPIDate_date, `${input.year.toString().padStart(4, '0') ?? '0000'}-${input.month.toString().padStart(2, '0') ?? '00'}-${input.date.toString().padStart(2, '0') ?? '00'}`, "f");
        }
        Object.defineProperty(this, constants_1.$CustomInspect, {
            value: () => `DataAPIDate("${__classPrivateFieldGet(this, _DataAPIDate_date, "f")}")`,
        });
    }
        components() {
        const signum = __classPrivateFieldGet(this, _DataAPIDate_date, "f").startsWith('-') ? -1 : 1;
        const date = __classPrivateFieldGet(this, _DataAPIDate_date, "f").split('-');
        if (signum === -1) {
            date.shift();
        }
        return { year: +date[0], month: +date[1], date: +date[2] };
    }
        toDate(base) {
        if (base instanceof DataAPITimestamp) {
            base = base.toDate();
        }
        if (!base) {
            base = new Date();
        }
        const date = this.components();
        if (base instanceof Date) {
            const ret = new Date(base);
            ret.setFullYear(date.year, date.month - 1, date.date);
            return ret;
        }
        const time = base.components();
        return new Date(date.year, date.month - 1, date.date, time.hours, time.minutes, time.seconds, time.nanoseconds / 1000000);
    }
        toString() {
        return __classPrivateFieldGet(this, _DataAPIDate_date, "f");
    }
}
exports.DataAPIDate = DataAPIDate;
const duration = (duration) => new DataAPIDuration(duration);
exports.duration = duration;
class DataAPIDuration {
        [(_DataAPIDuration_duration = new WeakMap(), constants_3.$SerializeForTable)](ctx) {
        return ctx.done(this.toString());
    }
    ;
        static [constants_3.$DeserializeForTable](value, ctx) {
        return ctx.done(new DataAPIDuration(value));
    }
        constructor(input) {
        _DataAPIDuration_duration.set(this, void 0);
        __classPrivateFieldSet(this, _DataAPIDuration_duration, input, "f");
        Object.defineProperty(this, constants_1.$CustomInspect, {
            value: () => `DataAPIDuration("${__classPrivateFieldGet(this, _DataAPIDuration_duration, "f")}")`,
        });
    }
        toString() {
        return __classPrivateFieldGet(this, _DataAPIDuration_duration, "f");
    }
}
exports.DataAPIDuration = DataAPIDuration;
const time = (time) => new DataAPITime(time);
exports.time = time;
class DataAPITime {
        [(_DataAPITime_time = new WeakMap(), constants_3.$SerializeForTable)](ctx) {
        return ctx.done(this.toString());
    }
    ;
        static [constants_3.$DeserializeForTable](value, ctx) {
        return ctx.done(new _a(value));
    }
        constructor(input) {
        _DataAPITime_time.set(this, void 0);
        input || (input = new Date());
        if (typeof input === 'string') {
            __classPrivateFieldSet(this, _DataAPITime_time, input, "f");
        }
        else if (input instanceof Date) {
            __classPrivateFieldSet(this, _DataAPITime_time, __classPrivateFieldGet(_a, _a, "m", _DataAPITime_initTime).call(_a, input.getHours(), input.getMinutes(), input.getSeconds(), input.getMilliseconds()), "f");
        }
        else {
            __classPrivateFieldSet(this, _DataAPITime_time, __classPrivateFieldGet(_a, _a, "m", _DataAPITime_initTime).call(_a, input.hours, input.minutes, input.seconds, input.nanoseconds ? input.nanoseconds.toString().padStart(9, '0') : ''), "f");
        }
        Object.defineProperty(this, constants_1.$CustomInspect, {
            value: () => `DataAPITime("${__classPrivateFieldGet(this, _DataAPITime_time, "f")}")`,
        });
    }
    /**
     * Returns the {@link DataAPITimeComponents} that make up this `DataAPITime`
     *
     * @returns The components of the time
     */
    components() {
        const [timePart, fractionPart] = __classPrivateFieldGet(this, _DataAPITime_time, "f").split('.');
        const [hours, mins, secs] = timePart.split(':');
        return {
            hours: +hours,
            minutes: +mins,
            seconds: +secs,
            nanoseconds: +fractionPart.padEnd(9, '0'),
        };
    }
        toDate(base) {
        if (base instanceof DataAPITimestamp) {
            base = base.toDate();
        }
        if (!base) {
            base = new Date();
        }
        const time = this.components();
        if (base instanceof Date) {
            const ret = new Date(base);
            ret.setHours(time.hours, time.minutes, time.seconds, time.nanoseconds / 1000000);
            return ret;
        }
        const date = base.components();
        return new Date(date.year, date.month - 1, date.date, time.hours, time.minutes, time.seconds, time.nanoseconds / 1000000);
    }
        toString() {
        return __classPrivateFieldGet(this, _DataAPITime_time, "f");
    }
}
exports.DataAPITime = DataAPITime;
_a = DataAPITime, _DataAPITime_initTime = function _DataAPITime_initTime(hours, minutes, seconds, fractional) {
    return `${hours < 10 ? '0' : ''}${hours}:${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}${fractional ? `.${fractional}` : ''}`;
};
const timestamp = (timestamp) => new DataAPITimestamp(timestamp);
exports.timestamp = timestamp;
class DataAPITimestamp {
        [(_DataAPITimestamp_timestamp = new WeakMap(), constants_3.$SerializeForTable)](ctx) {
        return ctx.done(this.toString());
    }
    ;
        [constants_2.$SerializeForCollection](ctx) {
        return ctx.done({ $date: this.toString() });
    }
    ;
        static [constants_3.$DeserializeForTable](value, ctx) {
        return ctx.done(new DataAPITimestamp(value));
    }
        static [constants_2.$DeserializeForCollection](_, value, ctx) {
        return ctx.done(new DataAPITimestamp(value.$date));
    }
        constructor(input) {
        _DataAPITimestamp_timestamp.set(this, void 0);
        input || (input = new Date());
        if (typeof input === 'string') {
            __classPrivateFieldSet(this, _DataAPITimestamp_timestamp, input, "f");
        }
        else if (input instanceof Date) {
            __classPrivateFieldSet(this, _DataAPITimestamp_timestamp, input.toISOString(), "f");
        }
        else {
            __classPrivateFieldSet(this, _DataAPITimestamp_timestamp, new Date(input.year ?? 0, input.month ?? 1 - 1, input.date, input.hours, input.minutes, input.seconds, input.nanoseconds ?? 0 / 1000000).toISOString(), "f");
        }
        Object.defineProperty(this, constants_1.$CustomInspect, {
            value: () => `DataAPITimestamp("${__classPrivateFieldGet(this, _DataAPITimestamp_timestamp, "f")}")`,
        });
    }
        components() {
        const date = this.toDate();
        return {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            date: date.getDate(),
            hours: date.getHours(),
            minutes: date.getMinutes(),
            seconds: date.getSeconds(),
            nanoseconds: date.getMilliseconds() * 1000000,
        };
    }
        toDate() {
        return new Date(__classPrivateFieldGet(this, _DataAPITimestamp_timestamp, "f"));
    }
        toString() {
        return __classPrivateFieldGet(this, _DataAPITimestamp_timestamp, "f");
    }
}
exports.DataAPITimestamp = DataAPITimestamp;
