"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _DataAPIBlob_raw;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAPIBlob = exports.blob = void 0;
const constants_1 = require("../../lib/constants");
const constants_2 = require("../../documents/tables/ser-des/constants");
const blob = (blob) => new DataAPIBlob(blob);
exports.blob = blob;
class DataAPIBlob {
        [(_DataAPIBlob_raw = new WeakMap(), constants_2.$SerializeForTable)](ctx) {
        return ctx.done({ $binary: this.asBase64() });
    }
    ;
        static [constants_2.$DeserializeForTable](value, ctx) {
        return ctx.done(new DataAPIBlob((ctx.parsingInsertedId) ? { $binary: value } : value, false));
    }
        constructor(blob, validate = true) {
        _DataAPIBlob_raw.set(this, void 0);
        if (validate && !DataAPIBlob.isBlobLike(blob)) {
            throw new TypeError(`Expected blob to be a string, ArrayBuffer, or Buffer (got '${blob}')`);
        }
        __classPrivateFieldSet(this, _DataAPIBlob_raw, (blob instanceof DataAPIBlob)
            ? __classPrivateFieldGet(blob, _DataAPIBlob_raw, "f")
            : blob, "f");
        Object.defineProperty(this, constants_1.$CustomInspect, {
            value: this.toString,
        });
    }
        get byteLength() {
        if (__classPrivateFieldGet(this, _DataAPIBlob_raw, "f") instanceof ArrayBuffer) {
            return __classPrivateFieldGet(this, _DataAPIBlob_raw, "f").byteLength;
        }
        if (__classPrivateFieldGet(this, _DataAPIBlob_raw, "f") instanceof Buffer) {
            return __classPrivateFieldGet(this, _DataAPIBlob_raw, "f").length;
        }
        return ~~((__classPrivateFieldGet(this, _DataAPIBlob_raw, "f").$binary.replace(/=+$/, '').length * 3) / 4);
    }
    /**
     * Gets the raw underlying implementation of the blob.
     *
     * @returns The raw blob
     */
    raw() {
        return __classPrivateFieldGet(this, _DataAPIBlob_raw, "f");
    }
    /**
     * Returns the blob as an `ArrayBuffer`, converting between types if necessary.
     *
     * @returns The blob as an `ArrayBuffer`
     */
    asArrayBuffer() {
        if (__classPrivateFieldGet(this, _DataAPIBlob_raw, "f") instanceof ArrayBuffer) {
            return __classPrivateFieldGet(this, _DataAPIBlob_raw, "f");
        }
        if (__classPrivateFieldGet(this, _DataAPIBlob_raw, "f") instanceof Buffer) {
            return bufferToArrayBuffer(__classPrivateFieldGet(this, _DataAPIBlob_raw, "f"));
        }
        return base64ToArrayBuffer(__classPrivateFieldGet(this, _DataAPIBlob_raw, "f").$binary);
    }
    /**
     * Returns the blob as a `Buffer`, if available, converting between types if necessary.
     *
     * @returns The blob as a `Buffer`
     */
    asBuffer() {
        if (typeof Buffer === 'undefined') {
            throw new Error("Buffer is not available in this environment");
        }
        if (__classPrivateFieldGet(this, _DataAPIBlob_raw, "f") instanceof Buffer) {
            return __classPrivateFieldGet(this, _DataAPIBlob_raw, "f");
        }
        if (__classPrivateFieldGet(this, _DataAPIBlob_raw, "f") instanceof ArrayBuffer) {
            return Buffer.from(__classPrivateFieldGet(this, _DataAPIBlob_raw, "f"));
        }
        return Buffer.from(__classPrivateFieldGet(this, _DataAPIBlob_raw, "f").$binary, 'base64');
    }
        asBase64() {
        if (__classPrivateFieldGet(this, _DataAPIBlob_raw, "f") instanceof ArrayBuffer) {
            return arrayBufferToBase64(__classPrivateFieldGet(this, _DataAPIBlob_raw, "f"));
        }
        if (__classPrivateFieldGet(this, _DataAPIBlob_raw, "f") instanceof Buffer) {
            return __classPrivateFieldGet(this, _DataAPIBlob_raw, "f").toString('base64');
        }
        return __classPrivateFieldGet(this, _DataAPIBlob_raw, "f").$binary;
    }
        toString() {
        const type = (__classPrivateFieldGet(this, _DataAPIBlob_raw, "f") instanceof ArrayBuffer && 'ArrayBuffer') || (__classPrivateFieldGet(this, _DataAPIBlob_raw, "f") instanceof Buffer && 'Buffer') || 'base64';
        return `DataAPIBlob(typeof raw=${type}, byteLength=${this.byteLength})`;
    }
        static isBlobLike(value) {
        return !!value && typeof value === 'object' && (value instanceof DataAPIBlob || ('$binary' in value && typeof value.$binary === 'string') || value instanceof ArrayBuffer || value instanceof Buffer);
    }
}
exports.DataAPIBlob = DataAPIBlob;
const base64ToArrayBuffer = (typeof Buffer !== 'undefined')
    ? nodeBase64ToArrayBuffer :
    (typeof window !== 'undefined')
        ? webBase64ToArrayBuffer
        : panicBase64ToBuffer;
function webBase64ToArrayBuffer(base64) {
    const binaryString = window.atob(base64);
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes.buffer;
}
function nodeBase64ToArrayBuffer(base64) {
    return bufferToArrayBuffer(Buffer.from(base64, 'base64'));
}
function panicBase64ToBuffer() {
    throw new Error("Cannot convert base64 to Buffer/ArrayBuffer in this environment; please do so manually");
}
const arrayBufferToBase64 = (typeof Buffer !== 'undefined')
    ? nodeArrayBufferToBase64 :
    (typeof window !== 'undefined')
        ? webArrayBufferToBase64
        : panicBufferToBase64;
function webArrayBufferToBase64(buffer) {
    let binary = '';
    const bytes = new Uint8Array(buffer);
    for (let i = 0; i < bytes.length; i++) {
        binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
}
function nodeArrayBufferToBase64(buffer) {
    return Buffer.from(buffer).toString('base64');
}
function panicBufferToBase64() {
    throw new Error("Cannot convert Buffer/ArrayBuffer to base64 in this environment; please do so manually");
}
function bufferToArrayBuffer(b) {
    return b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);
}
