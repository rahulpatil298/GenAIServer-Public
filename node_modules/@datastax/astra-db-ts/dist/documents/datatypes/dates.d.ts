import { CollCodec, CollDesCtx, CollSerCtx, TableCodec, TableDesCtx, TableSerCtx } from '../../documents';
import { $DeserializeForCollection, $SerializeForCollection } from '../../documents/collections/ser-des/constants';
import { $DeserializeForTable, $SerializeForTable } from '../../documents/tables/ser-des/constants';
/**
 * A shorthand function for `new DataAPIDate(date?)`
 *
 * If no date is provided, it defaults to the current date.
 *
 * @public
 */
export declare const date: (date?: string | Date | DataAPIDateComponents) => DataAPIDate;
/**
 * Represents the time components that make up a `DataAPIDate`
 *
 * @public
 */
export interface DataAPIDateComponents {
    /**
     * The year of the date
     */
    year: number;
    /**
     * The month of the date (should be between 1 and 12)
     */
    month: number;
    /**
     * The day of the month
     */
    date: number;
}
/**
 * Represents a `date` column for Data API tables.
 *
 * You may use the {@link date} function as a shorthand for creating a new `DataAPIDate`.
 *
 * See the official DataStax documentation for more information.
 *
 * @public
 */
export declare class DataAPIDate implements TableCodec<typeof DataAPIDate> {
    #private;
    /**
     * Implementation of `$SerializeForTable` for {@link TableCodec}
     */
    [$SerializeForTable](ctx: TableSerCtx): readonly [0, (string | undefined)?];
    /**
     * Implementation of `$DeserializeForTable` for {@link TableCodec}
     */
    static [$DeserializeForTable](value: any, ctx: TableDesCtx): readonly [0, (DataAPIDate | undefined)?];
    /**
     * Creates a new `DataAPIVector` instance from various formats.
     *
     * @param input - The input to create the `DataAPIDate` from
     */
    constructor(input?: string | Date | DataAPIDateComponents);
    /**
     * Returns the {@link DataAPIDateComponents} that make up this `DataAPIDate`
     *
     * @returns The components of the date
     */
    components(): DataAPIDateComponents;
    /**
     * Converts this `DataAPIDate` to a `Date` object
     *
     * If no `base` date/time is provided to use the time from, the time component is set to be the current time.
     *
     * @param base - The base date/time to use for the time component
     *
     * @returns The `Date` object representing this `DataAPIDate`
     */
    toDate(base?: Date | DataAPITime | DataAPITimestamp): Date;
    /**
     * Returns the string representation of this `DataAPIDate`
     *
     * @returns The string representation of this `DataAPIDate`
     */
    toString(): string;
}
/**
 * A shorthand function for `new DataAPIDuration(duration)`
 *
 * @public
 */
export declare const duration: (duration: string) => DataAPIDuration;
/**
 * Represents a `duration` column for Data API tables.
 *
 * You may use the {@link duration} function as a shorthand for creating a new `DataAPIDuration`.
 *
 * See the official DataStax documentation for more information.
 *
 * @public
 */
export declare class DataAPIDuration implements TableCodec<typeof DataAPIDuration> {
    #private;
    /**
     * Implementation of `$SerializeForTable` for {@link TableCodec}
     */
    [$SerializeForTable](ctx: TableSerCtx): readonly [0, (string | undefined)?];
    /**
     * Implementation of `$DeserializeForTable` for {@link TableCodec}
     */
    static [$DeserializeForTable](value: any, ctx: TableDesCtx): readonly [0, (DataAPIDuration | undefined)?];
    /**
     * Creates a new `DataAPIDuration` instance from a duration string.
     *
     * @param input - The duration string to create the `DataAPIDuration` from
     */
    constructor(input: string);
    /**
     * Returns the string representation of this `DataAPIDuration`
     *
     * @returns The string representation of this `DataAPIDuration`
     */
    toString(): string;
}
/**
 * A shorthand function for `new DataAPITime(time?)`
 *
 * If no time is provided, it defaults to the current time.
 *
 * @public
 */
export declare const time: (time?: string | Date | DataAPITimeComponents) => DataAPITime;
/**
 * Represents the time components that make up a `DataAPITime`
 *
 * @public
 */
export interface DataAPITimeComponents {
    /**
     * The hour of the time
     */
    hours: number;
    /**
     * The minute of the time
     */
    minutes: number;
    /**
     * The second of the time
     */
    seconds: number;
    /**
     * The nanosecond of the time
     */
    nanoseconds: number;
}
/**
 * Represents a `time` column for Data API tables.
 *
 * You may use the {@link time} function as a shorthand for creating a new `DataAPITime`.
 *
 * See the official DataStax documentation for more information.
 *
 * @public
 */
export declare class DataAPITime implements TableCodec<typeof DataAPITime> {
    #private;
    /**
     * Implementation of `$SerializeForTable` for {@link TableCodec}
     */
    [$SerializeForTable](ctx: TableSerCtx): readonly [0, (string | undefined)?];
    /**
     * Implementation of `$DeserializeForTable` for {@link TableCodec}
     */
    static [$DeserializeForTable](value: any, ctx: TableDesCtx): readonly [0, (DataAPITime | undefined)?];
    /**
     * Creates a new `DataAPITime` instance from various formats.
     *
     * @param input - The input to create the `DataAPITime` from
     */
    constructor(input?: string | Date | (DataAPITimeComponents & {
        nanoseconds?: number;
    }));
    /**
     * Returns the {@link DataAPITimeComponents} that make up this `DataAPITime`
     *
     * @returns The components of the time
     */
    components(): DataAPITimeComponents;
    /**
     * Converts this `DataAPITime` to a `Date` object
     *
     * If no `base` date/time is provided to use the date from, the date component is set to be the current date.
     *
     * @param base - The base date/time to use for the date component
     *
     * @returns The `Date` object representing this `DataAPITime`
     */
    toDate(base?: Date | DataAPIDate | DataAPITimestamp): Date;
    /**
     * Returns the string representation of this `DataAPITime`
     *
     * @returns The string representation of this `DataAPITime`
     */
    toString(): string;
}
/**
 * A shorthand function for `new DataAPITimestamp(timestamp?)`
 *
 * If no timestamp is provided, it defaults to the current timestamp.
 *
 * @public
 */
export declare const timestamp: (timestamp?: string | Date | DataAPITimestampComponents) => DataAPITimestamp;
/**
 * Represents the time components that make up a `DataAPITimestamp`
 *
 * @public
 */
export interface DataAPITimestampComponents {
    /**
     * The year of the timestamp
     */
    year: number;
    /**
     * The month of the timestamp (should be between 1 and 12)
     */
    month: number;
    /**
     * The day of the month
     */
    date: number;
    /**
     * The hour of the timestamp
     */
    hours: number;
    /**
     * The minute of the timestamp
     */
    minutes: number;
    /**
     * The second of the timestamp
     */
    seconds: number;
    /**
     * The nanosecond of the timestamp
     */
    nanoseconds: number;
}
/**
 * Represents a `timestamp` column for Data API tables.
 *
 * You may use the {@link timestamp} function as a shorthand for creating a new `DataAPITimestamp`.
 *
 * See the official DataStax documentation for more information.
 *
 * @public
 */
export declare class DataAPITimestamp implements CollCodec<typeof DataAPITimestamp>, TableCodec<typeof DataAPITimestamp> {
    #private;
    /**
     * Implementation of `$SerializeForTable` for {@link TableCodec}
     */
    [$SerializeForTable](ctx: TableSerCtx): readonly [0, (string | undefined)?];
    /**
     * Implementation of `$SerializeForCollection` for {@link TableCodec}
     */
    [$SerializeForCollection](ctx: CollSerCtx): readonly [0, ({
        $date: string;
    } | undefined)?];
    /**
     * Implementation of `$DeserializeForTable` for {@link TableCodec}
     */
    static [$DeserializeForTable](value: any, ctx: TableDesCtx): readonly [0, (DataAPITimestamp | undefined)?];
    /**
     * Implementation of `$DeserializeForCollection` for {@link TableCodec}
     */
    static [$DeserializeForCollection](_: string, value: any, ctx: CollDesCtx): readonly [0, (DataAPITimestamp | undefined)?];
    /**
     * Creates a new `DataAPITimestamp` instance from various formats.
     *
     * @param input - The input to create the `DataAPITimestamp` from
     */
    constructor(input?: string | Date | Partial<DataAPITimestampComponents>);
    /**
     * Returns the {@link DataAPITimestampComponents} that make up this `DataAPITimestamp`
     *
     * @returns The components of the timestamp
     */
    components(): DataAPITimestampComponents;
    /**
     * Converts this `DataAPITimestamp` to a `Date` object
     *
     * @returns The `Date` object representing this `DataAPITimestamp`
     */
    toDate(): Date;
    /**
     * Returns the string representation of this `DataAPITimestamp`
     *
     * @returns The string representation of this `DataAPITimestamp`
     */
    toString(): string;
}
