import { CollCodec, type CollDesCtx, type CollSerCtx, TableCodec, TableDesCtx, TableSerCtx } from '../../documents';
import { $DeserializeForCollection, $SerializeForCollection } from '../../documents/collections/ser-des/constants';
import { $DeserializeForTable, $SerializeForTable } from '../../documents/tables/ser-des/constants';
/**
 * A shorthand function for `new UUID(uuid)`
 *
 * `uuid(4)` and `uuid(7)` are equivalent to `UUID.v4()` and `UUID.v7()`, respectively.
 *
 * @public
 */
export declare const uuid: (uuid: string | 4 | 7) => UUID;
/**
 * Represents a UUID that can be used as an _id in the DataAPI.
 *
 * Provides methods for creating v4 and v7 UUIDs, and for parsing timestamps from v7 UUIDs.
 *
 * @example
 * ```typescript
 * const collections = await db.createCollection('myCollection'. {
 *   defaultId: {
 *     type: 'uuidv7',
 *   },
 * });
 *
 * await collections.insertOne({ type: 'Jomsvikings' });
 *
 * const doc = await collections.findOne({ type: 'Jomsvikings' });
 *
 * // Prints the UUID of the document
 * console.log(doc._id.toString());
 *
 * // Prints the timestamp when the document was created (server time)
 * console.log(doc._id.getTimestamp());
 * ```
 *
 * @example
 * ```typescript
 * await collections.insertOne({ _id: UUID.v4(), car: 'toon' });
 *
 * const doc = await collections.findOne({ car: 'toon' });
 *
 * // Prints the UUID of the document
 * console.log(doc._id.toString());
 *
 * // Undefined, as the document was created with a v4 UUID
 * console.log(doc._id.getTimestamp());
 * ```
 *
 * @see ObjectId
 *
 * @public
 */
export declare class UUID implements CollCodec<typeof UUID>, TableCodec<typeof UUID> {
    #private;
    /**
     * The version of the UUID.
     */
    readonly version: number;
    /**
     * Implementation of `$SerializeForTable` for {@link TableCodec}
     */
    [$SerializeForTable](ctx: TableSerCtx): readonly [0, (string | undefined)?];
    /**
     * Implementation of `$SerializeForCollection` for {@link TableCodec}
     */
    [$SerializeForCollection](ctx: CollSerCtx): readonly [0, ({
        $uuid: string;
    } | undefined)?];
    /**
     * Implementation of `$DeserializeForTable` for {@link TableCodec}
     */
    static [$DeserializeForTable](value: any, ctx: TableDesCtx): readonly [0, (UUID | undefined)?];
    /**
     * Implementation of `$DeserializeForCollection` for {@link TableCodec}
     */
    static [$DeserializeForCollection](_: string, value: any, ctx: CollDesCtx): readonly [0, (UUID | undefined)?];
    /**
     * Creates a new UUID instance.
     *
     * Use `UUID.v4()` or `UUID.v7()` to generate random new UUIDs.
     *
     * @param uuid - The UUID string.
     * @param validate - Whether to validate the UUID string. Defaults to `true`.
     */
    constructor(uuid: string, validate?: boolean);
    /**
     * Compares this UUID to another UUID.
     *
     * **The other UUID can be a UUID instance or a string.**
     *
     * A UUID is considered equal to another UUID if their lowercase string representations are equal.
     *
     * @param other - The UUID to compare to.
     *
     * @returns `true` if the UUIDs are equal, `false` otherwise.
     */
    equals(other: unknown): boolean;
    /**
     * Returns the timestamp of a v7 UUID. If the UUID is not a v7 UUID, this method returns `undefined`.
     *
     * @returns The timestamp of the UUID, or `undefined` if the UUID is not a v7 UUID.
     */
    getTimestamp(): Date | undefined;
    /**
     * Returns the string representation of the UUID in lowercase.
     */
    toString(): string;
    /**
     * Creates a new v4 UUID.
     */
    static v4(): UUID;
    /**
     * Creates a new v7 UUID.
     */
    static v7(): UUID;
}
