import { type RawDataAPIResponse } from '../lib';
import { DataAPIClientEvent } from '../lib/logging/events';
import type { DataAPIRequestInfo } from '../lib/api/clients/data-api-http-client';
import type { DataAPIErrorDescriptor } from '../documents/errors';
import { TimeoutDescriptor } from '../lib/api/timeouts';
/**
 * The events emitted by the {@link DataAPIClient}. These events are emitted at various stages of the
 * command's lifecycle. Intended for use for monitoring and logging purposes.
 *
 * **Note that these emit *real* commands, not any abstracted commands like "insertMany" or "updateMany",
 * which may be split into multiple of those commands under the hood.**
 *
 * @public
 */
export type CommandEventMap = {
    /**
     * Emitted when a command is started, before the initial HTTP request is made.
     */
    commandStarted: (event: CommandStartedEvent) => void;
    /**
     * Emitted when a command has succeeded.
     */
    commandSucceeded: (event: CommandSucceededEvent) => void;
    /**
     * Emitted when a command has errored.
     */
    commandFailed: (event: CommandFailedEvent) => void;
    /**
     * Emitted when a command has warnings.
     */
    commandWarnings: (event: CommandWarningsEvent) => void;
};
/**
 * Common base class for all command events.
 *
 * **Note that these emit *real* commands, not any abstracted commands like "insertMany" or "updateMany",
 * which may be split into multiple of those commands under the hood.**
 *
 * @public
 */
export declare abstract class CommandEvent extends DataAPIClientEvent {
    /**
     * The command object. Equal to the response body of the HTTP request.
     *
     * Note that this is the actual raw command object; it's not necessarily 1:1 with methods called on the collection/db.
     *
     * @example
     * ```typescript
     * {
     * Â  insertOne: { document: { name: 'John' } }
     * }
     * ```
     */
    readonly command: Record<string, any>;
    /**
     * The keyspace the command is being run in.
     */
    readonly keyspace: string;
    /**
     * The table/collection the command is being run on, if applicable.
     */
    readonly source?: string;
    /**
     * The command name.
     *
     * This is the key of the command object. For example, if the command object is
     * `{ insertOne: { document: { name: 'John' } } }`, the command name is `insertOne`.
     */
    readonly commandName: string;
    /**
     * The URL the command is being sent to.
     */
    readonly url: string;
    /**
     * Should not be instantiated directly.
     *
     * @internal
     */
    protected constructor(name: string, info: DataAPIRequestInfo);
    /**
     * @internal
     */
    protected _desc(): string;
}
/**
 * Emitted when a command is started, before the initial HTTP request is made.
 *
 * **Note that these emit *real* commands, not any abstracted commands like "insertMany" or "updateMany",
 * which may be split into multiple of those commands under the hood.**
 *
 * See {@link CommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
export declare class CommandStartedEvent extends CommandEvent {
    /**
     * The timeout for the command, in milliseconds.
     */
    readonly timeout: Partial<TimeoutDescriptor>;
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info: DataAPIRequestInfo);
    /**
     * Formats the warnings into a human-readable string.
     */
    formatted(): string;
}
/**
 * Emitted when a command has succeeded.
 *
 * **Note that these emit *real* commands, not any abstracted commands like "insertMany" or "updateMany",
 * which may be split into multiple of those commands under the hood.**
 *
 * See {@link CommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
export declare class CommandSucceededEvent extends CommandEvent {
    /**
     * The duration of the command, in milliseconds. Starts counting from the moment of the initial HTTP request.
     */
    readonly duration: number;
    /**
     * The response object from the Data API.
     */
    readonly resp?: RawDataAPIResponse;
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info: DataAPIRequestInfo, reply: RawDataAPIResponse, started: number);
    /**
     * Formats the warnings into a human-readable string.
     */
    formatted(): string;
}
/**
 * Emitted when a command has errored.
 *
 * **Note that these emit *real* commands, not any abstracted commands like "insertMany" or "updateMany",
 * which may be split into multiple of those commands under the hood.**
 *
 * See {@link CommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
export declare class CommandFailedEvent extends CommandEvent {
    /**
     * The duration of the command, in milliseconds.
     */
    readonly duration: number;
    /**
     * The error that caused the command to fail.
     *
     * Typically, some {@link DataAPIError}, commonly a {@link DataAPIResponseError} or one of its subclasses.
     */
    readonly error: Error;
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info: DataAPIRequestInfo, error: Error, started: number);
    /**
     * Formats the warnings into a human-readable string.
     */
    formatted(): string;
}
/**
 * Event emitted when the Data API returned a warning for some command.
 *
 * See {@link CommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
export declare class CommandWarningsEvent extends CommandEvent {
    /**
     * The warnings that occurred.
     */
    readonly warnings: DataAPIErrorDescriptor[];
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info: DataAPIRequestInfo, warnings: DataAPIErrorDescriptor[]);
    /**
     * Formats the warnings into a human-readable string.
     */
    formatted(): string;
}
