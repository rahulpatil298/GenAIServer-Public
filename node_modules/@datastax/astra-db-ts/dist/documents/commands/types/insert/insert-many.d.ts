import type { WithTimeout } from '../../../../lib';
/**
 * Options for a generic `insertMany` command using the Data API.
 *
 * The parameters depend on the `ordered` option. If `ordered` is `true`, the `parallel` option is not allowed.
 *
 * @field ordered - If `true`, the records are inserted sequentially; else, they're arbitrary inserted in parallel.
 * @field concurrency - The maximum number of concurrent requests to make at once.
 * @field chunkSize - The number of records to upload per request. Defaults to 20.
 * @field timeout - The timeout override for this method
 *
 * @public
 */
export type GenericInsertManyOptions = GenericInsertManyUnorderedOptions | GenericInsertManyOrderedOptions;
/**
 * Options for a generic `insertMany` command using the Data API when `ordered` is `true`.
 *
 * @field ordered - If `true`, the records are inserted sequentially in the order provided.
 * @field chunkSize - The number of records to upload per request. Defaults to 50.
 * @field timeout - The timeout override for this method
 *
 * @see GenericInsertManyOptions
 *
 * @public
 */
export interface GenericInsertManyOrderedOptions extends WithTimeout<'generalMethodTimeoutMs'> {
    /**
     * If `true`, the records are inserted in the order provided. If an error occurs, the operation stops and the
     * remaining records are not inserted.
     */
    ordered: true;
    /**
     * The number of records to upload per request. Defaults to 50.
     *
     * If you have large records, you may find it beneficial to reduce this number and increase concurrency to
     * improve throughput. Leave it unspecified (recommended) to use the system default.
     *
     * @defaultValue 50
     */
    chunkSize?: number;
}
/**
 * Options for a generic `insertMany` command using the Data API when `ordered` is `false` or unset.
 *
 * @field ordered - If `false` or unset, the records are inserted in an arbitrary, parallelized order.
 * @field concurrency - The maximum number of concurrent requests to make at once.
 * @field chunkSize - The number of records to upload per request. Defaults to 50.
 * @field timeout - The timeout override for this method
 *
 * @see Collection.insertMany
 *
 * @public
 */
export interface GenericInsertManyUnorderedOptions extends WithTimeout<'generalMethodTimeoutMs'> {
    /**
     * If `false`, the records are inserted in an arbitrary order. If an error occurs, the operation does not stop
     * and the remaining records are inserted. This allows the operation to be parallelized for better performance.
     */
    ordered?: false;
    /**
     * The maximum number of concurrent requests to make at once.
     */
    concurrency?: number;
    /**
     * The number of records to upload per request. Defaults to 50.
     *
     * If you have large records, you may find it beneficial to reduce this number and increase concurrency to
     * improve throughput. Leave it unspecified (recommended) to use the system default.
     *
     * @defaultValue 50
     */
    chunkSize?: number;
}
/**
 * Shouldn't be used by the user directly.
 *
 * @internal
 */
export interface GenericInsertManyResult<ID> {
    insertedIds: ID[];
    insertedCount: number;
}
/**
 * Shouldn't be used by the user directly.
 *
 * @internal
 */
export type GenericInsertManyDocumentResponse<_T> = any;
