import { DataAPIHttpClient } from '../../lib/api/clients';
import { SerDes } from '../../lib/api/ser-des/ser-des';
import { Collection, CollectionInsertManyOptions, DataAPIDetailedErrorDescriptor, DataAPIResponseError, Filter, FindCursor, GenericDeleteManyResult, GenericDeleteOneOptions, GenericDeleteOneResult, GenericFindOneAndDeleteOptions, GenericFindOneAndReplaceOptions, GenericFindOneAndUpdateOptions, GenericFindOneOptions, GenericFindOptions, GenericInsertManyResult, GenericInsertOneResult, GenericReplaceOneOptions, GenericUpdateManyOptions, GenericUpdateOneOptions, GenericUpdateResult, SomeDoc, SomeRow, Table, UpdateFilter } from '../../documents';
import { nullish, WithTimeout } from '../../lib';
/**
 * @internal
 */
export declare class CommandImpls<ID> {
    private readonly _httpClient;
    private readonly _serdes;
    private readonly _tOrC;
    constructor(tOrC: Table<SomeRow> | Collection, httpClient: DataAPIHttpClient, serdes: SerDes);
    insertOne(_document: SomeDoc, options: WithTimeout<'generalMethodTimeoutMs'> | nullish): Promise<GenericInsertOneResult<ID>>;
    insertMany(docs: readonly SomeDoc[], options: CollectionInsertManyOptions | nullish, err: new (descs: DataAPIDetailedErrorDescriptor[]) => DataAPIResponseError): Promise<GenericInsertManyResult<ID>>;
    updateOne(_filter: Filter, _update: UpdateFilter, options?: GenericUpdateOneOptions): Promise<GenericUpdateResult<ID, 0 | 1>>;
    updateMany(_filter: Filter, _update: UpdateFilter, options?: GenericUpdateManyOptions): Promise<GenericUpdateResult<ID, number>>;
    replaceOne(_filter: Filter, _replacement: SomeDoc, options?: GenericReplaceOneOptions): Promise<GenericUpdateResult<ID, 0 | 1>>;
    deleteOne(_filter: Filter, options?: GenericDeleteOneOptions): Promise<GenericDeleteOneResult>;
    deleteMany(_filter: Filter, options?: WithTimeout<'generalMethodTimeoutMs'>): Promise<GenericDeleteManyResult>;
    find<Cursor extends FindCursor<SomeDoc>>(filter: Filter, options: GenericFindOptions | undefined, cursor: new (...args: ConstructorParameters<typeof FindCursor<SomeDoc>>) => Cursor): Cursor;
    findOne<Schema>(_filter: Filter, options?: GenericFindOneOptions): Promise<Schema | null>;
    findOneAndReplace<Schema extends SomeDoc>(_filter: Filter, _replacement: SomeDoc, options?: GenericFindOneAndReplaceOptions): Promise<Schema | null>;
    findOneAndDelete<Schema extends SomeDoc>(_filter: Filter, options?: GenericFindOneAndDeleteOptions): Promise<Schema | null>;
    findOneAndUpdate<Schema extends SomeDoc>(_filter: Filter, _update: SomeDoc, options?: GenericFindOneAndUpdateOptions): Promise<Schema | null>;
    distinct(key: string, filter: SomeDoc, options: WithTimeout<'generalMethodTimeoutMs'> | undefined, mkCursor: new (...args: ConstructorParameters<typeof FindCursor<SomeDoc>>) => FindCursor<SomeDoc>): Promise<any[]>;
    countDocuments(_filter: Filter, upperBound: number, options: WithTimeout<'generalMethodTimeoutMs'> | undefined, error: new (count: number, hitLimit: boolean) => Error): Promise<number>;
    estimatedDocumentCount(options?: WithTimeout<'generalMethodTimeoutMs'>): Promise<number>;
}
