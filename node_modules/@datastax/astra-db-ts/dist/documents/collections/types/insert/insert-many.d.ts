import type { GenericInsertManyOptions, IdOf } from '../../../../documents';
/**
 * Options for an `insertMany` command on a collection.
 *
 * The parameters depend on the `ordered` option. If `ordered` is `true`, the `parallel` option is not allowed.
 *
 * @field ordered - If `true`, the docs are inserted sequentially; else, they're arbitrary inserted in parallel.
 * @field concurrency - The maximum number of concurrent requests to make at once.
 * @field chunkSize - The number of documents to upload per request. Defaults to 50.
 * @field timeout - The timeout override for this method
 *
 * @see Collection.insertMany
 *
 * @public
 */
export type CollectionInsertManyOptions = GenericInsertManyOptions;
/**
 * Represents the result of an `insertMany` command on a collection.
 *
 * @field insertedIds - The IDs of the inserted documents.
 * @field insertedCount - The number of inserted documents.
 *
 * @see Collection.insertMany
 *
 * @public
 */
export interface CollectionInsertManyResult<RSchema> {
    /**
     * The IDs of the inserted documents (including the autogenerated IDs).
     *
     * Note that it is up to the user that the IDs cover all possible types of IDs that the collection may have,
     * keeping in mind the type of the auto-generated IDs, as well as any the user may provide.
     */
    insertedIds: IdOf<RSchema>[];
    /**
     * The number of inserted documents (equals `insertedIds.length`).
     */
    insertedCount: number;
}
