"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Collection_httpClient, _Collection_commands, _Collection_db;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collection = void 0;
const command_impls_1 = require("../../documents/commands/command-impls");
const constants_1 = require("../../lib/constants");
const documents_1 = require("../../documents");
const json_bigint_1 = __importDefault(require("json-bigint"));
const cursor_1 = require("../../documents/collections/cursor");
const utils_1 = require("../../lib/utils");
const ser_des_1 = require("../../documents/collections/ser-des/ser-des");
const jbi = (0, json_bigint_1.default)({ storeAsString: true });
class Collection {
        constructor(db, httpClient, name, opts) {
        _Collection_httpClient.set(this, void 0);
        _Collection_commands.set(this, void 0);
        _Collection_db.set(this, void 0);
                Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "keyspace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, 'name', {
            value: name,
            writable: false,
        });
        Object.defineProperty(this, 'keyspace', {
            value: opts?.keyspace ?? db.keyspace,
            writable: false,
        });
        const hack = {
            parseWithBigNumbers: () => !!opts?.serdes?.enableBigNumbers,
            parser: (0, utils_1.withJbiNullProtoFix)(jbi),
        };
        __classPrivateFieldSet(this, _Collection_httpClient, httpClient.forTableSlashCollectionOrWhateverWeWouldCallTheUnionOfTheseTypes(this.keyspace, this.name, opts, hack), "f");
        __classPrivateFieldSet(this, _Collection_commands, new command_impls_1.CommandImpls(this, __classPrivateFieldGet(this, _Collection_httpClient, "f"), new ser_des_1.CollectionSerDes(opts?.serdes)), "f");
        __classPrivateFieldSet(this, _Collection_db, db, "f");
        Object.defineProperty(this, constants_1.$CustomInspect, {
            value: () => `Collection(keyspace="${this.keyspace}",name="${this.name}")`,
        });
    }
        async insertOne(document, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").insertOne(document, options);
    }
        async insertMany(documents, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").insertMany(documents, options, documents_1.CollectionInsertManyError);
    }
        async updateOne(filter, update, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").updateOne(filter, update, options);
    }
        async updateMany(filter, update, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").updateMany(filter, update, options);
    }
        async replaceOne(filter, replacement, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").replaceOne(filter, replacement, options);
    }
        async deleteOne(filter, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").deleteOne(filter, options);
    }
        async deleteMany(filter, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").deleteMany(filter, options);
    }
    find(filter, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").find(filter, options, cursor_1.CollectionFindCursor);
    }
    async findOne(filter, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").findOne(filter, options);
    }
        async distinct(key, filter, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").distinct(key, filter, options, cursor_1.CollectionFindCursor);
    }
        async countDocuments(filter, upperBound, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").countDocuments(filter, upperBound, options, documents_1.TooManyDocumentsToCountError);
    }
        async estimatedDocumentCount(options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").estimatedDocumentCount(options);
    }
        async findOneAndReplace(filter, replacement, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").findOneAndReplace(filter, replacement, options);
    }
        async findOneAndDelete(filter, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").findOneAndDelete(filter, options);
    }
        async findOneAndUpdate(filter, update, options) {
        return __classPrivateFieldGet(this, _Collection_commands, "f").findOneAndUpdate(filter, update, options);
    }
        async options(options) {
        const resp = await __classPrivateFieldGet(this, _Collection_db, "f").listCollections({ timeout: options?.timeout, keyspace: this.keyspace });
        const collection = resp.find((c) => c.name === this.name);
        if (!collection) {
            throw new Error(`Can not get options for collection '${this.keyspace}.${this.name}'; collection not found. Did you use the right keyspace?`);
        }
        return collection.definition;
    }
        async drop(options) {
        await __classPrivateFieldGet(this, _Collection_db, "f").dropCollection(this.name, { keyspace: this.keyspace, ...options });
    }
        get _httpClient() {
        return __classPrivateFieldGet(this, _Collection_httpClient, "f");
    }
}
exports.Collection = Collection;
_Collection_httpClient = new WeakMap(), _Collection_commands = new WeakMap(), _Collection_db = new WeakMap();
