"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollCodecs = void 0;
// Important to import from specific paths here to avoid circular dependencies
const uuid_1 = require("../../../documents/datatypes/uuid");
const object_id_1 = require("../../../documents/datatypes/object-id");
const vector_1 = require("../../../documents/datatypes/vector");
const dates_1 = require("../../../documents/datatypes/dates");
const constants_1 = require("../../../documents/collections/ser-des/constants");
class CollCodecs {
        constructor(state) {
                Object.defineProperty(this, "get", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.get = state;
    }
    static forPath(path, clazzOrOpts) {
        if (constants_1.$DeserializeForCollection in clazzOrOpts) {
            return new CollCodecs({ codecType: 'path', path, deserialize: clazzOrOpts[constants_1.$DeserializeForCollection] });
        }
        return new CollCodecs({ codecType: 'path', path, ...clazzOrOpts });
    }
    static forName(name, clazzOrOpts) {
        if (constants_1.$DeserializeForCollection in clazzOrOpts) {
            return new CollCodecs({ codecType: 'name', name, deserialize: clazzOrOpts[constants_1.$DeserializeForCollection] });
        }
        return new CollCodecs({ codecType: 'name', name, ...clazzOrOpts });
    }
    static forType(type, clazzOrOpts) {
        if (constants_1.$DeserializeForCollection in clazzOrOpts) {
            return new CollCodecs({ codecType: 'type', type, deserialize: clazzOrOpts[constants_1.$DeserializeForCollection] });
        }
        return new CollCodecs({ codecType: 'type', type, ...clazzOrOpts });
    }
}
exports.CollCodecs = CollCodecs;
Object.defineProperty(CollCodecs, "Defaults", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: {
        $date: CollCodecs.forType('$date', {
            serializeClass: Date,
            serialize(_, value, ctx) {
                return ctx.done({ $date: value.valueOf() });
            },
            deserialize(_, value, ctx) {
                return ctx.done(new Date(value.$date));
            },
        }),
        $vector: CollCodecs.forName('$vector', vector_1.DataAPIVector),
        $uuid: CollCodecs.forType('$uuid', uuid_1.UUID),
        $objectId: CollCodecs.forType('$objectId', object_id_1.ObjectId),
    }
});
Object.defineProperty(CollCodecs, "Overrides", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: {
        USE_DATA_API_TIMESTAMPS_OVER_DATES: CollCodecs.forType('$date', dates_1.DataAPITimestamp),
        // USE_NUMBER_ARRAYS_FOR_VECTORS:
    }
});
