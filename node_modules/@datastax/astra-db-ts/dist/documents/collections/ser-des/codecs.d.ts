import { CollDesCtx, CollSerCtx, TableSerCtx } from '../../../documents';
import { CodecHolder } from '../../../lib/api/ser-des/codecs';
import { EmptyObj, SerDesFn } from '../../../lib';
import { $DeserializeForCollection, $SerializeForCollection } from '../../../documents/collections/ser-des/constants';
/**
 * @public
 */
export interface CollCodecSerDesFns {
    serialize: SerDesFn<CollSerCtx>;
    deserialize: SerDesFn<CollDesCtx>;
}
/**
 * @public
 */
export interface CollCodecClass {
    new (...args: any[]): {
        [$SerializeForCollection]: (ctx: CollSerCtx) => ReturnType<SerDesFn<any>>;
    };
    [$DeserializeForCollection]: CollCodecSerDesFns['deserialize'];
}
/**
 * @public
 */
export type CollCodec<_Class extends CollCodecClass> = EmptyObj;
/**
 * @public
 */
export declare class CollCodecs implements CodecHolder<CollCodecSerDesFns> {
    /**
     * @internal
     */
    readonly get: CodecHolder<CollCodecSerDesFns>['get'];
    /**
     * @internal
     */
    constructor(state: typeof this.get);
    static Defaults: {
        $date: CollCodecs;
        $vector: CollCodecs;
        $uuid: CollCodecs;
        $objectId: CollCodecs;
    };
    static Overrides: {
        USE_DATA_API_TIMESTAMPS_OVER_DATES: CollCodecs;
    };
    static forPath(path: string[], clazz: CollCodecClass): CollCodecs;
    static forPath(path: string[], opts: CollCodecSerDesFns): CollCodecs;
    static forName(name: string, clazz: CollCodecClass): CollCodecs;
    static forName(name: string, opts: CollCodecSerDesFns): CollCodecs;
    static forType(type: string, clazz: CollCodecClass): CollCodecs;
    static forType(type: string, opts: CollCodecSerDesFns & {
        serializeGuard: (value: unknown, ctx: TableSerCtx) => boolean;
    }): CollCodecs;
    static forType(type: string, opts: CollCodecSerDesFns & {
        serializeClass: new (...args: any[]) => any;
    }): CollCodecs;
    static forType(type: string, opts: CollCodecSerDesFns & {
        deserializeOnly: true;
    }): CollCodecs;
}
