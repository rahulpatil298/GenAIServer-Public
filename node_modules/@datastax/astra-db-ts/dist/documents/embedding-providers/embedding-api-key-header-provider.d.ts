import { EmbeddingHeadersProvider } from '../../documents/embedding-providers/embedding-headers-provider';
import { nullish } from '../../lib';
/**
 * The most basic embedding header provider, used for the vast majority of providers.
 *
 * Generally, anywhere this can be used in the public `astra-db-ts` interfaces, you may also pass in a plain
 * string or null/undefined, which is transformed into an {@link EmbeddingAPIKeyHeaderProvider} under the hood.
 *
 * @example
 * ```typescript
 * const provider = new EmbeddingAPIKeyHeaderProvider('api-key');
 * const collections = await db.collections('my_coll', { embeddingApiKey: provider });
 *
 * // or just
 *
 * const collections = await db.collections('my_coll', { embeddingApiKey: 'api-key' });
 * ```
 *
 * @see EmbeddingHeadersProvider
 *
 * @public
 */
export declare class EmbeddingAPIKeyHeaderProvider extends EmbeddingHeadersProvider {
    #private;
    /**
     * Constructs an instead of the {@link EmbeddingAPIKeyHeaderProvider}.
     *
     * @param apiKey - The api-key/token to regurgitate in `getTokenAsString`
     */
    constructor(apiKey: string | nullish);
    /**
     * Returns the proper header for the default embedding header authentication, or an empty record if `apiKey` was undefined.
     *
     * @returns the proper header for the default embedding header authentication.
     */
    getHeaders(): Record<string, string>;
}
