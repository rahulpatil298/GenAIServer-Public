import { SomeDoc, TableDesCtx, TableSerCtx } from '../../../documents';
import { CodecHolder } from '../../../lib/api/ser-des/codecs';
import { EmptyObj, SerDesFn } from '../../../lib';
import { $DeserializeForTable, $SerializeForTable } from '../../../documents/tables/ser-des/constants';
/**
 * @public
 */
export interface TableCodecSerDesFns {
    serialize: SerDesFn<TableSerCtx>;
    deserialize: (val: any, ctx: TableDesCtx, definition: SomeDoc) => ReturnType<SerDesFn<any>>;
}
/**
 * @public
 */
export interface TableCodecClass {
    new (...args: any[]): {
        [$SerializeForTable]: (ctx: TableSerCtx) => ReturnType<SerDesFn<any>>;
    };
    [$DeserializeForTable]: TableCodecSerDesFns['deserialize'];
}
/**
 * @public
 */
export type TableCodec<_Class extends TableCodecClass> = EmptyObj;
/**
 * @public
 */
export declare class TableCodecs implements CodecHolder<TableCodecSerDesFns> {
    /**
     * @internal
     */
    readonly get: CodecHolder<TableCodecSerDesFns>['get'];
    /**
     * @internal
     */
    constructor(state: typeof this.get);
    static Defaults: {
        bigint: TableCodecs;
        blob: TableCodecs;
        date: TableCodecs;
        decimal: TableCodecs;
        double: TableCodecs;
        duration: TableCodecs;
        float: TableCodecs;
        int: TableCodecs;
        inet: TableCodecs;
        smallint: TableCodecs;
        time: TableCodecs;
        timestamp: TableCodecs;
        timeuuid: TableCodecs;
        tinyint: TableCodecs;
        uuid: TableCodecs;
        vector: TableCodecs;
        varint: TableCodecs;
        map: TableCodecs;
        list: TableCodecs;
        set: TableCodecs;
    };
    static Overrides: {};
    static forPath(path: string[], clazz: TableCodecClass): TableCodecs;
    static forPath(path: string[], opts: TableCodecSerDesFns): TableCodecs;
    static forName(name: string, clazz: TableCodecClass): TableCodecs;
    static forName(name: string, opts: TableCodecSerDesFns): TableCodecs;
    static forType(type: string, clazz: TableCodecClass): TableCodecs;
    static forType(type: string, opts: TableCodecSerDesFns & {
        serializeGuard: (value: unknown, ctx: TableSerCtx) => boolean;
    }): TableCodecs;
    static forType(type: string, opts: TableCodecSerDesFns & {
        serializeClass: new (...args: any[]) => any;
    }): TableCodecs;
    static forType(type: string, opts: Pick<TableCodecSerDesFns, 'deserialize'> & {
        deserializeOnly: true;
    }): TableCodecs;
}
