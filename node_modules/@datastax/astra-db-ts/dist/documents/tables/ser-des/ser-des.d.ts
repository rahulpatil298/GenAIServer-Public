import { SomeDoc } from '../../../documents';
import { SerDes, BaseSerDesConfig } from '../../../lib/api/ser-des/ser-des';
import { ListTableColumnDefinitions } from '../../../db';
import { TableCodecs, TableCodecSerDesFns } from '../../../documents/tables/ser-des/codecs';
import { BaseDesCtx, BaseSerCtx } from '../../../lib/api/ser-des/ctx';
/**
 * @public
 */
export interface TableSerCtx extends BaseSerCtx<TableCodecSerDesFns> {
    bigNumsPresent: boolean;
}
/**
 * @public
 */
export interface TableDesCtx extends BaseDesCtx<TableCodecSerDesFns> {
    tableSchema: ListTableColumnDefinitions;
    populateSparseData: boolean;
    recurse: never;
}
/**
 * @public
 */
export type TableColumnTypeParser = (val: any, ctx: TableDesCtx, definition: SomeDoc) => any;
/**
 * @public
 */
export interface TableSerDesConfig extends BaseSerDesConfig<TableCodecs, TableCodecSerDesFns, TableSerCtx, TableDesCtx> {
    codecs?: TableCodecs[];
    sparseData?: boolean;
}
/**
 * @internal
 */
export declare class TableSerDes extends SerDes<TableCodecSerDesFns, TableSerCtx, TableDesCtx> {
    protected readonly _cfg: TableSerDesConfig;
    constructor(cfg?: TableSerDesConfig);
    adaptSerCtx(ctx: TableSerCtx): TableSerCtx;
    adaptDesCtx(ctx: TableDesCtx): TableDesCtx;
    bigNumsPresent(ctx: TableSerCtx): boolean;
    static mergeConfig(...cfg: (TableSerDesConfig | undefined)[]): TableSerDesConfig;
}
