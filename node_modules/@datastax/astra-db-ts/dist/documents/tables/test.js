"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const db = null;
// Demo of automagically inferring your table schema's type
const _c = db.createTable('my_table', {
    definition: {
        columns: {
            key: 'text',
            age: {
                type: 'int',
            },
            car: {
                type: 'map',
                keyType: 'text',
                valueType: 'int',
            },
        },
        primaryKey: 'key',
    },
});
const _d = {
    key: 'a',
    age: 3,
    car: new Map(),
};
const _e = {
    key: '1',
};
// Demo of type errors that we can provide if you screw something up
const _f = db.createTable('my_table', {
    definition: {
        columns: {
            key: 'int',
        },
        primaryKey: 'id',
    },
});
// const _g: InferTableSchema<typeof _f> = {
//   key: 1,
// };
const _h = {
    id: {},
};
// Demo of manually providing your own table schema
const _i = db.createTable('my_table', {
    definition: {
        columns: {},
        primaryKey: 'id',
    },
});
const _j = {
    whatever: 'I want',
};
// Better demo of automagically inferring your table schema's type
const mkTable = () => db.createTable('my_table', {
    definition: {
        columns: {
            key: 'text',
            age: {
                type: 'int',
            },
            car: {
                type: 'map',
                keyType: 'text',
                valueType: 'int',
            },
        },
        primaryKey: {
            partitionBy: ['key', 'bad'],
            partitionSort: { age: -1 },
        },
    },
});
(async () => {
    const myTable = await mkTable();
    const insertManyResult = await myTable.insertMany([
        {
            age: 3,
            car: new Map(),
            key: '3',
        },
        {
            age: 53,
            car: new Map(),
            key: 'hi!',
        },
    ]);
    void insertManyResult.insertedIds[1].age;
})();
