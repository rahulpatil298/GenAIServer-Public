import type { DataAPIClientEventMap, DataAPIEnvironment, DataAPILoggingOutput, TimeoutDescriptor, TokenProvider } from '../../lib';
import type TypedEmitter from 'typed-emitter';
import type { FetchCtx } from '../../lib/api/fetch/types';
import type { AdminOptions, DbOptions } from '../../client';
import type { NormalizedLoggingConfig } from '../../lib/logging/types';
/**
 * @internal
 */
export type InternalLoggingConfig = Readonly<Record<keyof DataAPIClientEventMap, Readonly<Record<DataAPILoggingOutput, boolean>> | undefined>>;
/**
 * @internal
 */
export interface InternalRootClientOpts {
    environment: DataAPIEnvironment;
    emitter: TypedEmitter<DataAPIClientEventMap>;
    fetchCtx: FetchCtx;
    userAgent: string;
    dbOptions: Omit<DbOptions, 'token' | 'logging'> & {
        token: TokenProvider | undefined;
        logging: NormalizedLoggingConfig[] | undefined;
        timeoutDefaults: TimeoutDescriptor;
    };
    adminOptions: Omit<AdminOptions, 'adminToken' | 'logging'> & {
        adminToken: TokenProvider | undefined;
        logging: NormalizedLoggingConfig[] | undefined;
        timeoutDefaults: TimeoutDescriptor;
    };
}
