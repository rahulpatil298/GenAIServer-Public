"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDbSpawnOpts = void 0;
const validation_1 = require("../../lib/validation");
const lib_1 = require("../../lib");
const utils_1 = require("../../lib/utils");
const logger_1 = require("../../lib/logging/logger");
const timeouts_1 = require("../../lib/api/timeouts");
const parseDbSpawnOpts = (raw, field) => {
    const opts = validation_1.p.parse('object?')(raw, field);
    if (!opts) {
        return undefined;
    }
    return {
        logging: logger_1.Logger.parseConfig(opts.logging, `${field}.logging`),
        keyspace: validation_1.p.parse('string?', validateKeyspace)(opts.keyspace, `${field}.keyspace`),
        dataApiPath: validation_1.p.parse('string?')(opts.dataApiPath, `${field}.dataApiPath`),
        token: lib_1.TokenProvider.mergeTokens(opts.token),
        serdes: validation_1.p.parse('object?', parseSerDes)(opts.serdes, `${field}.serDes`),
        additionalHeaders: validation_1.p.parse('object?')(opts.additionalHeaders, `${field}.additionalHeaders`),
        timeoutDefaults: timeouts_1.Timeouts.parseConfig(opts.timeoutDefaults, `${field}.timeoutDefaults`),
    };
};
exports.parseDbSpawnOpts = parseDbSpawnOpts;
const parseSerDes = (cfg, field) => ({
    table: validation_1.p.parse('object?')(cfg.table, `${field}.table`),
    collection: validation_1.p.parse('object?')(cfg.collection, `${field}.collection`),
    mutateInPlace: validation_1.p.parse('boolean?')(cfg.mutateInPlace, `${field}.mutateInPlace`),
});
const validateKeyspace = (keyspace, field) => {
    if ((0, utils_1.isNullish)(keyspace)) {
        return undefined;
    }
    if (!keyspace.match(/^\w{1,48}$/)) {
        throw new Error(`Invalid ${field}; expected a string of 1-48 alphanumeric characters`);
    }
    return keyspace;
};
