"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseHttpOpts = void 0;
const validation_1 = require("../../lib/validation");
const HttpClients = ['default', 'fetch', 'custom'];
void validation_1.EqualityProof;
const parseHttpClient = validation_1.p.mkStrEnumParser('DataAPILoggingOutput', HttpClients, false);
const parseHttpOpts = (raw, field) => {
    const opts = validation_1.p.parse('object?')(raw, field);
    if (!opts) {
        return undefined;
    }
    const client = parseHttpClient(opts.client, `${field}.client`) ?? 'default';
    const parser = {
        default: parseDefaultHttpOpts,
        fetch: parseFetchHttpOpts,
        custom: parseCustomHttpOpts,
    }[client];
    return parser(opts, field);
};
exports.parseHttpOpts = parseHttpOpts;
const parseDefaultHttpOpts = (opts, field) => {
    const preferHttp2 = validation_1.p.parse('boolean?')(opts.preferHttp2, `${field}.preferHttp2`) ?? true;
    const http1 = validation_1.p.parse('object?', (http1, field) => {
        return {
            keepAlive: validation_1.p.parse('boolean?')(http1.keepAlive, `${field}.keepAlive`),
            keepAliveMS: validation_1.p.parse('number?')(http1.keepAliveMS, `${field}.keepAliveMS`),
            maxSockets: validation_1.p.parse('number?')(http1.maxSockets, `${field}.maxSockets`),
            maxFreeSockets: validation_1.p.parse('number?')(http1.maxFreeSockets, `${field}.maxFreeSockets`),
        };
    })(opts.http1, `${field}.http1`);
    const fetchH2 = validation_1.p.parse('object?', (fetchH2, field) => {
        return {
            TimeoutError: validation_1.p.parse('function!')(fetchH2.TimeoutError, `${field}.TimeoutError`),
            context: validation_1.p.parse('function!')(fetchH2.context, `${field}.context`),
        };
    })(opts.fetchH2, `${field}.fetchH2`);
    return { client: 'default', preferHttp2, http1, fetchH2 };
};
const parseFetchHttpOpts = () => {
    return { client: 'fetch' };
};
const parseCustomHttpOpts = (opts, field) => {
    const fetcher = validation_1.p.parse('object!', (fetcher, field) => {
        return {
            close: validation_1.p.parse('function?')(fetcher.close, `${field}.close`),
            fetch: validation_1.p.parse('function!')(fetcher.fetch, `${field}.fetch`),
        };
    })(opts.fetcher, `${field}.fetcher`);
    return { client: 'custom', fetcher };
};
