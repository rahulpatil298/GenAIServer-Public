import type { DevOpsAPIRequestInfo } from '../lib/api/clients/devops-api-http-client';
import type { DataAPIErrorDescriptor } from '../documents';
import { DataAPIClientEvent } from '../lib/logging/events';
import { TimeoutDescriptor } from '../lib/api/timeouts';
/**
 * The events emitted by the {@link DataAPIClient}. These events are emitted at various stages of the
 * admin command's lifecycle. Intended for use for monitoring and logging purposes.
 *
 * @public
 */
export type AdminCommandEventMap = {
    /**
     * Emitted when an admin command is started, before the initial HTTP request is made.
     */
    adminCommandStarted: (event: AdminCommandStartedEvent) => void;
    /**
     * Emitted when a command is polling in a long-running operation (i.e. create database).
     */
    adminCommandPolling: (event: AdminCommandPollingEvent) => void;
    /**
     * Emitted when an admin command has succeeded, after any necessary polling.
     */
    adminCommandSucceeded: (event: AdminCommandSucceededEvent) => void;
    /**
     * Emitted when an admin command has errored.
     */
    adminCommandFailed: (event: AdminCommandFailedEvent) => void;
    /**
     * Emitted when an admin command has warnings.
     */
    adminCommandWarnings: (event: AdminCommandWarningsEvent) => void;
};
/**
 * Common base class for all admin command events.
 *
 * @public
 */
export declare abstract class AdminCommandEvent extends DataAPIClientEvent {
    /**
     * The path for the request, not including the Base URL.
     */
    readonly path: string;
    /**
     * The HTTP method for the request.
     */
    readonly method: 'GET' | 'POST' | 'DELETE';
    /**
     * The request body, if any.
     */
    readonly reqBody?: Record<string, any>;
    /**
     * The query parameters, if any.
     */
    readonly params?: Record<string, any>;
    /**
     * Whether the command is long-running or not, i.e. requires polling.
     */
    readonly longRunning: boolean;
    /**
     * The method which invoked the request
     */
    readonly methodName: string;
    /**
     * Should not be instantiated directly.
     *
     * @internal
     */
    protected constructor(name: string, info: DevOpsAPIRequestInfo, longRunning: boolean);
    /**
     * @internal
     */
    protected _desc(): string;
}
/**
 * Event emitted when an admin command is started. This is emitted before the initial HTTP request is made.
 *
 * See {@link AdminCommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
export declare class AdminCommandStartedEvent extends AdminCommandEvent {
    /**
     * The timeout for the request, in milliseconds.
     */
    readonly timeout: Partial<TimeoutDescriptor>;
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info: DevOpsAPIRequestInfo, longRunning: boolean, timeout: Partial<TimeoutDescriptor>);
    /**
     * Formats the warnings into a human-readable string.
     */
    formatted(): string;
}
/**
 * Event emitted when a command is polling in a long-running operation (i.e. create database).
 *
 * Emits every time the command polls.
 *
 * See {@link AdminCommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
export declare class AdminCommandPollingEvent extends AdminCommandEvent {
    /**
     * The elapsed time since the command was started, in milliseconds.
     */
    readonly elapsed: number;
    /**
     * The polling interval, in milliseconds.
     */
    readonly interval: number;
    /**
     * The number of times polled so far
     */
    readonly pollCount: number;
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info: DevOpsAPIRequestInfo, started: number, interval: number, pollCount: number);
    /**
     * Formats the warnings into a human-readable string.
     */
    formatted(): string;
}
/**
 * Event emitted when an admin command has succeeded, after any necessary polling.
 *
 * See {@link AdminCommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
export declare class AdminCommandSucceededEvent extends AdminCommandEvent {
    /**
     * The duration of the command, in milliseconds.
     */
    readonly duration: number;
    /**
     * The response body of the command, if any.
     */
    readonly resBody?: Record<string, any>;
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info: DevOpsAPIRequestInfo, longRunning: boolean, data: Record<string, any> | undefined, started: number);
    /**
     * Formats the warnings into a human-readable string.
     */
    formatted(): string;
}
/**
 * Event emitted when an admin command has errored.
 *
 * See {@link AdminCommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
export declare class AdminCommandFailedEvent extends AdminCommandEvent {
    /**
     * The duration of the command, in milliseconds.
     */
    readonly duration: number;
    /**
     * The error that occurred.
     *
     * Typically, some {@link DevOpsAPIError}, commonly a {@link DevOpsAPIResponseError} or sometimes a
     * {@link DevOpsUnexpectedStateError}
     */
    readonly error: Error;
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info: DevOpsAPIRequestInfo, longRunning: boolean, error: Error, started: number);
    /**
     * Formats the warnings into a human-readable string.
     */
    formatted(): string;
}
/**
 * Event emitted when the Data API returned a warning for an admin command.
 *
 * See {@link AdminCommandEvent} for more information about all the common properties available on this event.
 *
 * @public
 */
export declare class AdminCommandWarningsEvent extends AdminCommandEvent {
    /**
     * The warnings that occurred.
     */
    readonly warnings: DataAPIErrorDescriptor[];
    /**
     * Should not be instantiated by the user.
     *
     * @internal
     */
    constructor(info: DevOpsAPIRequestInfo, longRunning: boolean, warnings: DataAPIErrorDescriptor[]);
    /**
     * Formats the warnings into a human-readable string.
     */
    formatted(): string;
}
