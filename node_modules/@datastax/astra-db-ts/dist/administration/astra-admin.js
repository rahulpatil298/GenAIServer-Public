"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
// noinspection ExceptionCaughtLocallyJS
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AstraAdmin_defaultOpts, _AstraAdmin_httpClient, _AstraAdmin_environment;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AstraAdmin = void 0;
const astra_db_admin_1 = require("../administration/astra-db-admin");
const db_1 = require("../db/db");
const utils_1 = require("../administration/utils");
const constants_1 = require("../lib/api/constants");
const devops_api_http_client_1 = require("../lib/api/clients/devops-api-http-client");
const lib_1 = require("../lib");
const spawn_admin_1 = require("../client/parsers/spawn-admin");
const utils_2 = require("../lib/utils");
const logger_1 = require("../lib/logging/logger");
const constants_2 = require("../lib/constants");
const timeouts_1 = require("../lib/api/timeouts");
class AstraAdmin {
        constructor(rootOpts, rawAdminOpts) {
        _AstraAdmin_defaultOpts.set(this, void 0);
        _AstraAdmin_httpClient.set(this, void 0);
        _AstraAdmin_environment.set(this, void 0);
        const adminOpts = (0, spawn_admin_1.parseAdminSpawnOpts)(rawAdminOpts, 'options');
        const token = lib_1.TokenProvider.mergeTokens(adminOpts?.adminToken, rootOpts.adminOptions.adminToken);
        __classPrivateFieldSet(this, _AstraAdmin_defaultOpts, {
            ...rootOpts,
            adminOptions: {
                endpointUrl: adminOpts?.endpointUrl || rootOpts.adminOptions.endpointUrl,
                adminToken: token,
                logging: logger_1.Logger.advanceConfig(rootOpts.adminOptions.logging, adminOpts?.logging),
                additionalHeaders: { ...rootOpts.adminOptions.additionalHeaders, ...adminOpts?.additionalHeaders },
                astraEnv: adminOpts?.astraEnv ?? rootOpts.adminOptions.astraEnv,
                timeoutDefaults: timeouts_1.Timeouts.merge(rootOpts.adminOptions.timeoutDefaults, adminOpts?.timeoutDefaults),
            },
            dbOptions: {
                ...rootOpts.dbOptions,
                token: lib_1.TokenProvider.mergeTokens(rootOpts.dbOptions.token, token),
            },
        }, "f");
        __classPrivateFieldSet(this, _AstraAdmin_environment, __classPrivateFieldGet(this, _AstraAdmin_defaultOpts, "f").adminOptions.astraEnv ?? 'prod', "f");
        __classPrivateFieldSet(this, _AstraAdmin_httpClient, new devops_api_http_client_1.DevOpsAPIHttpClient({
            logging: __classPrivateFieldGet(this, _AstraAdmin_defaultOpts, "f").adminOptions.logging,
            baseUrl: __classPrivateFieldGet(this, _AstraAdmin_defaultOpts, "f").adminOptions.endpointUrl ?? constants_1.DEFAULT_DEVOPS_API_ENDPOINTS[__classPrivateFieldGet(this, _AstraAdmin_environment, "f")],
            emitter: rootOpts.emitter,
            fetchCtx: rootOpts.fetchCtx,
            userAgent: rootOpts.userAgent,
            tokenProvider: __classPrivateFieldGet(this, _AstraAdmin_defaultOpts, "f").adminOptions.adminToken,
            additionalHeaders: __classPrivateFieldGet(this, _AstraAdmin_defaultOpts, "f").adminOptions.additionalHeaders,
            timeoutDefaults: timeouts_1.Timeouts.merge(rootOpts.adminOptions.timeoutDefaults, __classPrivateFieldGet(this, _AstraAdmin_defaultOpts, "f").adminOptions.timeoutDefaults),
        }), "f");
        Object.defineProperty(this, constants_2.$CustomInspect, {
            value: () => `AstraAdmin()`,
        });
    }
    db(endpointOrId, regionOrOptions, maybeOptions) {
        const dbOpts = (typeof regionOrOptions === 'string')
            ? maybeOptions
            : regionOrOptions;
        if (typeof regionOrOptions === 'string' && (endpointOrId.startsWith('https://') || endpointOrId.startsWith('http://'))) {
            throw new Error('Unexpected db() argument: database id can\'t start with "http(s)://". Did you mean to call `.db(endpoint, { keyspace })`?');
        }
        const endpoint = (typeof regionOrOptions === 'string')
            ? 'https://' + endpointOrId + '-' + regionOrOptions + '.apps.astra.datastax.com'
            : endpointOrId;
        return new db_1.Db(__classPrivateFieldGet(this, _AstraAdmin_defaultOpts, "f"), endpoint, dbOpts);
    }
    dbAdmin(endpointOrId, regionOrOptions, maybeOptions) {
                return this.db(endpointOrId, regionOrOptions, maybeOptions).admin(__classPrivateFieldGet(this, _AstraAdmin_defaultOpts, "f").adminOptions);
    }
        async dbInfo(id, options) {
        const tm = __classPrivateFieldGet(this, _AstraAdmin_httpClient, "f").tm.single('databaseAdminTimeoutMs', options);
        const resp = await __classPrivateFieldGet(this, _AstraAdmin_httpClient, "f").request({
            method: constants_1.HttpMethods.Get,
            path: `/databases/${id}`,
            methodName: 'admin.dbInfo',
        }, tm);
        return (0, utils_1.buildAstraDatabaseAdminInfo)(resp.data, __classPrivateFieldGet(this, _AstraAdmin_environment, "f"));
    }
        async listDatabases(options) {
        const params = {};
        if (typeof options?.include === 'string') {
            params['include'] = options.include;
        }
        if (typeof options?.provider === 'string') {
            params['provider'] = options.provider;
        }
        if (typeof options?.limit === 'number') {
            params['limit'] = String(options.skip);
        }
        if (typeof options?.skip === 'number') {
            params['starting_after'] = String(options.skip);
        }
        const tm = __classPrivateFieldGet(this, _AstraAdmin_httpClient, "f").tm.single('databaseAdminTimeoutMs', options);
        const resp = await __classPrivateFieldGet(this, _AstraAdmin_httpClient, "f").request({
            method: constants_1.HttpMethods.Get,
            path: `/databases`,
            params: params,
            methodName: 'admin.listDatabases',
        }, tm);
        return resp.data.map((d) => (0, utils_1.buildAstraDatabaseAdminInfo)(d, __classPrivateFieldGet(this, _AstraAdmin_environment, "f")));
    }
        async createDatabase(config, options) {
        const definition = {
            capacityUnits: 1,
            tier: 'serverless',
            dbType: 'vector',
            keyspace: config.keyspace || constants_1.DEFAULT_KEYSPACE,
            ...config,
        };
        const tm = __classPrivateFieldGet(this, _AstraAdmin_httpClient, "f").tm.multipart('databaseAdminTimeoutMs', options);
        const resp = await __classPrivateFieldGet(this, _AstraAdmin_httpClient, "f").requestLongRunning({
            method: constants_1.HttpMethods.Post,
            path: '/databases',
            data: definition,
            methodName: 'admin.createDatabase',
        }, {
            id: (resp) => resp.headers.location,
            target: 'ACTIVE',
            legalStates: ['INITIALIZING', 'PENDING'],
            defaultPollInterval: 10000,
            timeoutManager: tm,
            options,
        });
        const endpoint = (0, utils_2.buildAstraEndpoint)(resp.headers.location, definition.region);
        const db = this.db(endpoint, { ...options?.dbOptions, keyspace: definition.keyspace });
        return new astra_db_admin_1.AstraDbAdmin(db, __classPrivateFieldGet(this, _AstraAdmin_defaultOpts, "f"), {}, __classPrivateFieldGet(this, _AstraAdmin_defaultOpts, "f").adminOptions.adminToken, endpoint);
    }
        async dropDatabase(db, options) {
        const id = typeof db === 'string' ? db : db.id;
        const tm = __classPrivateFieldGet(this, _AstraAdmin_httpClient, "f").tm.multipart('databaseAdminTimeoutMs', options);
        await __classPrivateFieldGet(this, _AstraAdmin_httpClient, "f").requestLongRunning({
            method: constants_1.HttpMethods.Post,
            path: `/databases/${id}/terminate`,
            methodName: 'admin.dropDatabase',
        }, {
            id: id,
            target: 'TERMINATED',
            legalStates: ['TERMINATING'],
            defaultPollInterval: 10000,
            timeoutManager: tm,
            options,
        });
    }
    get _httpClient() {
        return __classPrivateFieldGet(this, _AstraAdmin_httpClient, "f");
    }
}
exports.AstraAdmin = AstraAdmin;
_AstraAdmin_defaultOpts = new WeakMap(), _AstraAdmin_httpClient = new WeakMap(), _AstraAdmin_environment = new WeakMap();
