"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
// import { DataAPIClientEvent } from '../lib/logging/events'; needs to be like this or it errors
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminCommandWarningsEvent = exports.AdminCommandFailedEvent = exports.AdminCommandSucceededEvent = exports.AdminCommandPollingEvent = exports.AdminCommandStartedEvent = exports.AdminCommandEvent = void 0;
const events_1 = require("../lib/logging/events");
class AdminCommandEvent extends events_1.DataAPIClientEvent {
        constructor(name, info, longRunning) {
        super(name);
                Object.defineProperty(this, "path", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "method", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "reqBody", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "params", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "longRunning", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "methodName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.path = info.path;
        this.method = info.method;
        this.reqBody = info.data;
        this.params = info.params;
        this.longRunning = longRunning;
        this.methodName = info.methodName;
    }
        _desc() {
        return `(${this.methodName}) ${this.method} ${this.path}${this.params ? '?' : ''}${new URLSearchParams(this.params).toString()}`;
    }
}
exports.AdminCommandEvent = AdminCommandEvent;
class AdminCommandStartedEvent extends AdminCommandEvent {
        constructor(info, longRunning, timeout) {
        super('AdminCommandStarted', info, longRunning);
                Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.timeout = timeout;
    }
        formatted() {
        return `${super.formatted()}: ${this._desc()} ${this.longRunning ? '(blocking) ' : ' '}${this.reqBody ? JSON.stringify(this.reqBody) : ''}`;
    }
}
exports.AdminCommandStartedEvent = AdminCommandStartedEvent;
class AdminCommandPollingEvent extends AdminCommandEvent {
        constructor(info, started, interval, pollCount) {
        super('AdminCommandPolling', info, true);
                Object.defineProperty(this, "elapsed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "interval", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "pollCount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.elapsed = performance.now() - started;
        this.interval = interval;
        this.pollCount = pollCount;
    }
        formatted() {
        return `${super.formatted()}: ${this._desc()} (poll #${this.pollCount}; ${~~this.elapsed}ms elapsed)`;
    }
}
exports.AdminCommandPollingEvent = AdminCommandPollingEvent;
class AdminCommandSucceededEvent extends AdminCommandEvent {
        constructor(info, longRunning, data, started) {
        super('AdminCommandSucceeded', info, longRunning);
                Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "resBody", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.duration = performance.now() - started;
        this.resBody = data || undefined;
    }
        formatted() {
        return `${super.formatted()}: ${this._desc()} ${this.reqBody ? JSON.stringify(this.reqBody) + ' ' : ''}(took ${~~this.duration}ms)`;
    }
}
exports.AdminCommandSucceededEvent = AdminCommandSucceededEvent;
class AdminCommandFailedEvent extends AdminCommandEvent {
        constructor(info, longRunning, error, started) {
        super('AdminCommandFailed', info, longRunning);
                Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
                Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.duration = performance.now() - started;
        this.error = error;
    }
        formatted() {
        return `${super.formatted()}: ${this._desc()} ${this.reqBody ? JSON.stringify(this.reqBody) + ' ' : ''}(took ${~~this.duration}ms) - '${this.error.message}'`;
    }
}
exports.AdminCommandFailedEvent = AdminCommandFailedEvent;
class AdminCommandWarningsEvent extends AdminCommandEvent {
        constructor(info, longRunning, warnings) {
        super('AdminCommandWarnings', info, longRunning);
                Object.defineProperty(this, "warnings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.warnings = warnings;
    }
        formatted() {
        return `${super.formatted()}: ${this._desc()} ${this.reqBody ? JSON.stringify(this.reqBody) + ' ' : ''}- '${this.warnings.map(w => w.message).join(', ')}'`;
    }
}
exports.AdminCommandWarningsEvent = AdminCommandWarningsEvent;
