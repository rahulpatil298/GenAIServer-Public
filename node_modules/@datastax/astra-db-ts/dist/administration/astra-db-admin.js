"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
// noinspection ExceptionCaughtLocallyJS
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AstraDbAdmin_instances, _AstraDbAdmin_httpClient, _AstraDbAdmin_dataApiHttpClient, _AstraDbAdmin_db, _AstraDbAdmin_environment, _AstraDbAdmin_info;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AstraDbAdmin = void 0;
const db_admin_1 = require("../administration/db-admin");
const lib_1 = require("../lib");
const utils_1 = require("../administration/utils");
const constants_1 = require("../lib/api/constants");
const devops_api_http_client_1 = require("../lib/api/clients/devops-api-http-client");
const spawn_admin_1 = require("../client/parsers/spawn-admin");
const constants_2 = require("../lib/constants");
const logger_1 = require("../lib/logging/logger");
const timeouts_1 = require("../lib/api/timeouts");
class AstraDbAdmin extends db_admin_1.DbAdmin {
        constructor(db, rootOpts, rawAdminOpts, dbToken, endpoint) {
        super();
        _AstraDbAdmin_instances.add(this);
        _AstraDbAdmin_httpClient.set(this, void 0);
        _AstraDbAdmin_dataApiHttpClient.set(this, void 0);
        _AstraDbAdmin_db.set(this, void 0);
        _AstraDbAdmin_environment.set(this, void 0);
        const adminOpts = (0, spawn_admin_1.parseAdminSpawnOpts)(rawAdminOpts, 'options');
        const adminToken = lib_1.TokenProvider.mergeTokens(adminOpts?.adminToken, rootOpts.adminOptions.adminToken, dbToken);
        __classPrivateFieldSet(this, _AstraDbAdmin_environment, adminOpts?.astraEnv ?? rootOpts.adminOptions.astraEnv ?? (0, utils_1.extractAstraEnvironment)(endpoint), "f");
        __classPrivateFieldSet(this, _AstraDbAdmin_httpClient, new devops_api_http_client_1.DevOpsAPIHttpClient({
            baseUrl: constants_1.DEFAULT_DEVOPS_API_ENDPOINTS[__classPrivateFieldGet(this, _AstraDbAdmin_environment, "f")],
            logging: logger_1.Logger.advanceConfig(rootOpts.adminOptions.logging, adminOpts?.logging),
            fetchCtx: rootOpts.fetchCtx,
            emitter: rootOpts.emitter,
            userAgent: rootOpts.userAgent,
            tokenProvider: adminToken,
            additionalHeaders: { ...rootOpts.adminOptions.additionalHeaders, ...adminOpts?.additionalHeaders },
            timeoutDefaults: timeouts_1.Timeouts.merge(rootOpts.adminOptions.timeoutDefaults, adminOpts?.timeoutDefaults),
        }), "f");
        __classPrivateFieldSet(this, _AstraDbAdmin_dataApiHttpClient, db._httpClient.forDbAdmin(adminOpts), "f");
        __classPrivateFieldSet(this, _AstraDbAdmin_db, db, "f");
        Object.defineProperty(this, constants_2.$CustomInspect, {
            value: () => `AstraDbAdmin()`,
        });
    }
        get id() {
        return __classPrivateFieldGet(this, _AstraDbAdmin_db, "f").id;
    }
        db() {
        return __classPrivateFieldGet(this, _AstraDbAdmin_db, "f");
    }
        async findEmbeddingProviders(options) {
        const resp = await __classPrivateFieldGet(this, _AstraDbAdmin_dataApiHttpClient, "f").executeCommand({ findEmbeddingProviders: {} }, {
            timeoutManager: __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, "f").tm.single('databaseAdminTimeoutMs', options),
            methodName: 'dbAdmin.findEmbeddingProviders',
            keyspace: null,
        });
        return resp.status;
    }
        async info(options) {
        const tm = __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, "f").tm.single('databaseAdminTimeoutMs', options);
        return __classPrivateFieldGet(this, _AstraDbAdmin_instances, "m", _AstraDbAdmin_info).call(this, 'dbAdmin.info', tm);
    }
        async listKeyspaces(options) {
        const tm = __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, "f").tm.single('keyspaceAdminTimeoutMs', options);
        return __classPrivateFieldGet(this, _AstraDbAdmin_instances, "m", _AstraDbAdmin_info).call(this, 'dbAdmin.listKeyspaces', tm).then(i => i.keyspaces);
    }
        async createKeyspace(keyspace, options) {
        if (options?.updateDbKeyspace) {
            __classPrivateFieldGet(this, _AstraDbAdmin_db, "f").useKeyspace(keyspace);
        }
        const tm = __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, "f").tm.multipart('keyspaceAdminTimeoutMs', options);
        await __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, "f").requestLongRunning({
            method: constants_1.HttpMethods.Post,
            path: `/databases/${__classPrivateFieldGet(this, _AstraDbAdmin_db, "f").id}/keyspaces/${keyspace}`,
            methodName: 'dmAdmin.createKeyspace',
        }, {
            id: __classPrivateFieldGet(this, _AstraDbAdmin_db, "f").id,
            target: 'ACTIVE',
            legalStates: ['MAINTENANCE'],
            defaultPollInterval: 1000,
            timeoutManager: tm,
            options,
        });
    }
        async dropKeyspace(keyspace, options) {
        const tm = __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, "f").tm.multipart('keyspaceAdminTimeoutMs', options);
        await __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, "f").requestLongRunning({
            method: constants_1.HttpMethods.Delete,
            path: `/databases/${__classPrivateFieldGet(this, _AstraDbAdmin_db, "f").id}/keyspaces/${keyspace}`,
            methodName: 'dbAdmin.dropKeyspace',
        }, {
            id: __classPrivateFieldGet(this, _AstraDbAdmin_db, "f").id,
            target: 'ACTIVE',
            legalStates: ['MAINTENANCE'],
            defaultPollInterval: 1000,
            timeoutManager: tm,
            options,
        });
    }
        async drop(options) {
        const tm = __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, "f").tm.multipart('databaseAdminTimeoutMs', options);
        await __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, "f").requestLongRunning({
            method: constants_1.HttpMethods.Post,
            path: `/databases/${__classPrivateFieldGet(this, _AstraDbAdmin_db, "f").id}/terminate`,
            methodName: 'dbAdmin.drop',
        }, {
            id: __classPrivateFieldGet(this, _AstraDbAdmin_db, "f").id,
            target: 'TERMINATED',
            legalStates: ['TERMINATING'],
            defaultPollInterval: 10000,
            timeoutManager: tm,
            options,
        });
    }
    get _httpClient() {
        return __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, "f");
    }
}
exports.AstraDbAdmin = AstraDbAdmin;
_AstraDbAdmin_httpClient = new WeakMap(), _AstraDbAdmin_dataApiHttpClient = new WeakMap(), _AstraDbAdmin_db = new WeakMap(), _AstraDbAdmin_environment = new WeakMap(), _AstraDbAdmin_instances = new WeakSet(), _AstraDbAdmin_info = async function _AstraDbAdmin_info(methodName, tm) {
    const resp = await __classPrivateFieldGet(this, _AstraDbAdmin_httpClient, "f").request({
        method: constants_1.HttpMethods.Get,
        path: `/databases/${__classPrivateFieldGet(this, _AstraDbAdmin_db, "f").id}`,
        methodName,
    }, tm);
    return (0, utils_1.buildAstraDatabaseAdminInfo)(resp.data, __classPrivateFieldGet(this, _AstraDbAdmin_environment, "f"));
};
