"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.Timeouts = exports.EffectivelyInfinity = void 0;
const utils_1 = require("../../lib/utils");
const validation_1 = require("../../lib/validation");
exports.EffectivelyInfinity = 2 ** 31 - 1;
class Timeouts {
    constructor(_mkTimeoutError, baseTimeouts) {
        Object.defineProperty(this, "_mkTimeoutError", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _mkTimeoutError
        });
        Object.defineProperty(this, "baseTimeouts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: baseTimeouts
        });
    }
    single(key, override) {
        if (typeof override?.timeout === 'number') {
            const timeout = override.timeout;
            const initial = {
                requestTimeoutMs: timeout,
                [key]: timeout,
            };
            return this.custom(initial, () => {
                return [timeout, 'provided'];
            });
        }
        const timeouts = {
            requestTimeoutMs: (override?.timeout?.requestTimeoutMs ?? this.baseTimeouts.requestTimeoutMs) || exports.EffectivelyInfinity,
            [key]: (override?.timeout?.[key] ?? this.baseTimeouts[key]) || exports.EffectivelyInfinity,
        };
        const timeout = Math.min(timeouts.requestTimeoutMs, timeouts[key]);
        const type = (timeouts.requestTimeoutMs === timeouts[key])
            ? ['requestTimeoutMs', key] :
            (timeouts.requestTimeoutMs < timeouts[key])
                ? 'requestTimeoutMs'
                : key;
        return this.custom(timeouts, () => {
            return [timeout, type];
        });
    }
    multipart(key, override) {
        const requestTimeout = ((typeof override?.timeout === 'object')
            ? override.timeout?.requestTimeoutMs ?? this.baseTimeouts.requestTimeoutMs
            : this.baseTimeouts.requestTimeoutMs)
            || exports.EffectivelyInfinity;
        const overallTimeout = ((typeof override?.timeout === 'object')
            ? override.timeout?.[key] ?? this.baseTimeouts[key] :
            (typeof override?.timeout === 'number')
                ? override.timeout
                : this.baseTimeouts[key])
            || exports.EffectivelyInfinity;
        const initial = {
            requestTimeoutMs: requestTimeout,
            [key]: overallTimeout,
        };
        let started;
        return this.custom(initial, () => {
            if (!started) {
                started = Date.now();
            }
            const overallLeft = overallTimeout - (Date.now() - started);
            if (overallLeft < requestTimeout) {
                return [overallLeft, key];
            }
            else if (overallLeft > requestTimeout) {
                return [requestTimeout, 'requestTimeoutMs'];
            }
            else {
                return [overallLeft, ['requestTimeoutMs', key]];
            }
        });
    }
    custom(peek, advance) {
        return {
            initial() {
                return peek;
            },
            advance: (info) => {
                const advanced = advance();
                const timeoutType = advanced[1];
                advanced[1] = () => this._mkTimeoutError(info, timeoutType);
                return advanced;
            },
        };
    }
    static merge(base, custom) {
        if (!custom) {
            return base;
        }
        return {
            requestTimeoutMs: custom.requestTimeoutMs ?? base.requestTimeoutMs,
            generalMethodTimeoutMs: custom.generalMethodTimeoutMs ?? base.generalMethodTimeoutMs,
            collectionAdminTimeoutMs: custom.collectionAdminTimeoutMs ?? base.collectionAdminTimeoutMs,
            tableAdminTimeoutMs: custom.tableAdminTimeoutMs ?? base.tableAdminTimeoutMs,
            databaseAdminTimeoutMs: custom.databaseAdminTimeoutMs ?? base.databaseAdminTimeoutMs,
            keyspaceAdminTimeoutMs: custom.keyspaceAdminTimeoutMs ?? base.keyspaceAdminTimeoutMs,
        };
    }
}
exports.Timeouts = Timeouts;
Object.defineProperty(Timeouts, "Default", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: {
        requestTimeoutMs: 10000,
        generalMethodTimeoutMs: 30000,
        collectionAdminTimeoutMs: 60000,
        tableAdminTimeoutMs: 30000,
        databaseAdminTimeoutMs: 600000,
        keyspaceAdminTimeoutMs: 30000,
    }
});
Object.defineProperty(Timeouts, "fmtTimeoutMsg", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: (tm, timeoutTypes) => {
        const timeout = (timeoutTypes === 'provided')
            ? Object.values(tm.initial())[0]
            : tm.initial()[(0, utils_1.toArray)(timeoutTypes)[0]];
        const types = (timeoutTypes === 'provided')
            ? `The timeout provided via \`{ timeout: <number> }\` timed out` :
            (Array.isArray(timeoutTypes))
                ? timeoutTypes.join(' and ') + ' simultaneously timed out'
                : `${timeoutTypes} timed out`;
        return `Command timed out after ${timeout}ms (${types})`;
    }
});
Object.defineProperty(Timeouts, "parseConfig", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: (raw, field) => {
        const opts = validation_1.p.parse('object?')(raw, field);
        if (!opts) {
            return undefined;
        }
        return {
            requestTimeoutMs: validation_1.p.parse('number?')(opts.requestTimeoutMs, `${field}.requestTimeoutMs`),
            generalMethodTimeoutMs: validation_1.p.parse('number?')(opts.generalMethodTimeoutMs, `${field}.generalMethodTimeoutMs`),
            collectionAdminTimeoutMs: validation_1.p.parse('number?')(opts.collectionAdminTimeoutMs, `${field}.collectionAdminTimeoutMs`),
            tableAdminTimeoutMs: validation_1.p.parse('number?')(opts.tableAdminTimeoutMs, `${field}.tableAdminTimeoutMs`),
            databaseAdminTimeoutMs: validation_1.p.parse('number?')(opts.databaseAdminTimeoutMs, `${field}.databaseAdminTimeoutMs`),
            keyspaceAdminTimeoutMs: validation_1.p.parse('number?')(opts.keyspaceAdminTimeoutMs, `${field}.keyspaceAdminTimeoutMs`),
        };
    }
});
