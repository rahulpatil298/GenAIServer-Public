import type { Caller } from '../../../client';
import type TypedEmitter from 'typed-emitter';
import type { FetchCtx, FetcherResponseInfo } from '../../../lib/api/fetch/types';
import type { HeaderProvider, HTTPClientOptions, HTTPRequestInfo } from '../../../lib/api/clients';
import type { DataAPIClientEventMap } from '../../../lib/logging';
import { Logger } from '../../../lib/logging/logger';
import { OneOrMany } from '../../../lib/types';
import { MkTimeoutError, Timeouts } from '../../../lib/api/timeouts';
/**
 * @internal
 */
export declare abstract class HttpClient {
    readonly baseUrl: string;
    readonly emitter: TypedEmitter<DataAPIClientEventMap>;
    readonly logger: Logger;
    readonly fetchCtx: FetchCtx;
    readonly baseHeaders: Record<string, any>;
    readonly headerProviders: HeaderProvider[];
    tm: Timeouts;
    protected constructor(options: HTTPClientOptions, headerProviders: HeaderProvider[], mkTimeoutError: MkTimeoutError);
    protected _request(info: HTTPRequestInfo): Promise<FetcherResponseInfo>;
}
/**
 * @internal
 */
export declare function buildUserAgent(caller: OneOrMany<Caller> | undefined): string;
