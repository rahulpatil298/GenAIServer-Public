import { HttpClient } from '../../../lib/api/clients';
import { AstraAdminBlockingOptions } from '../../../administration/types';
import type { HTTPClientOptions, HttpMethodStrings } from '../../../lib/api/clients/types';
import type { TokenProvider } from '../../../lib';
import { TimeoutManager } from '../../../lib/api/timeouts';
/**
 * @internal
 */
export interface DevOpsAPIRequestInfo {
    path: string;
    method: HttpMethodStrings;
    data?: Record<string, any>;
    params?: Record<string, string>;
    methodName: string;
}
interface LongRunningRequestInfo {
    id: string | ((resp: DevopsAPIResponse) => string);
    target: string;
    legalStates: string[];
    defaultPollInterval: number;
    options: AstraAdminBlockingOptions | undefined;
    timeoutManager: TimeoutManager;
}
interface DevopsAPIResponse {
    data?: Record<string, any>;
    headers: Record<string, string>;
    status: number;
}
interface DevOpsAPIHttpClientOpts extends HTTPClientOptions {
    tokenProvider: TokenProvider | undefined;
}
/**
 * @internal
 */
export declare class DevOpsAPIHttpClient extends HttpClient {
    constructor(opts: DevOpsAPIHttpClientOpts);
    request(req: DevOpsAPIRequestInfo, timeoutManager: TimeoutManager, started?: number): Promise<DevopsAPIResponse>;
    requestLongRunning(req: DevOpsAPIRequestInfo, info: LongRunningRequestInfo): Promise<DevopsAPIResponse>;
    private _awaitStatus;
}
export {};
