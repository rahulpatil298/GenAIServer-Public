import type TypedEmitter from 'typed-emitter';
import type { CommandEventMap } from '../../../documents';
import type { FetchCtx } from '../../../lib/api/fetch/types';
import type { HttpMethods } from '../../../lib/api/constants';
import type { Ref } from '../../../lib/types';
import type { NormalizedLoggingConfig } from '../../../lib/logging/types';
import { TimeoutDescriptor, TimeoutManager } from '../../../lib/api/timeouts';
/**
 * @internal
 */
export interface HTTPClientOptions {
    baseUrl: string;
    baseApiPath?: string | null;
    emitter: TypedEmitter<CommandEventMap>;
    logging: NormalizedLoggingConfig[] | undefined;
    fetchCtx: FetchCtx;
    userAgent: string;
    additionalHeaders: Record<string, string> | undefined;
    timeoutDefaults: TimeoutDescriptor;
}
/**
 * @internal
 */
export type HeaderProvider = () => (Promise<Record<string, string>> | Record<string, string>);
/**
 * @internal
 */
export type HttpMethodStrings = typeof HttpMethods[keyof typeof HttpMethods];
/**
 * @internal
 */
export type KeyspaceRef = Ref<string | undefined>;
/**
 * @internal
 */
export interface HTTPRequestInfo {
    url: string;
    data?: string;
    params?: Record<string, string>;
    method: HttpMethodStrings;
    timeoutManager: TimeoutManager;
    forceHttp1?: boolean;
}
