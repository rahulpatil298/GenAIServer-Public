import { Logger } from '../../../lib/logging/logger';
import { RawDataAPIResponse, TokenProvider } from '../../../lib';
import { DataAPIErrorDescriptor, EmbeddingHeadersProvider, SomeDoc } from '../../../documents';
import type { HTTPClientOptions, KeyspaceRef } from '../../../lib/api/clients/types';
import { HttpClient } from '../../../lib/api/clients/http-client';
import { CollectionOptions, TableOptions } from '../../../db';
import type { AdminOptions } from '../../../client';
import { TimeoutManager } from '../../../lib/api/timeouts';
import { EmptyObj } from '../../../lib/types';
type ClientKind = 'admin' | 'normal';
/**
 * @internal
 */
type ExecCmdOpts<Kind extends ClientKind> = (Kind extends 'admin' ? {
    methodName: string;
} : EmptyObj) & {
    keyspace?: string | null;
    timeoutManager: TimeoutManager;
    bigNumsPresent?: boolean;
    collection?: string;
};
/**
 * @internal
 */
export interface DataAPIRequestInfo {
    url: string;
    collection?: string;
    keyspace?: string | null;
    command: Record<string, any>;
    timeoutManager: TimeoutManager;
    bigNumsPresent: boolean | undefined;
}
type EmissionStrategy<Kind extends ClientKind> = (logger: Logger) => {
    emitCommandStarted?(info: DataAPIRequestInfo, opts: ExecCmdOpts<Kind>): void;
    emitCommandFailed?(info: DataAPIRequestInfo, error: Error, started: number, opts: ExecCmdOpts<Kind>): void;
    emitCommandSucceeded?(info: DataAPIRequestInfo, resp: RawDataAPIResponse, started: number, opts: ExecCmdOpts<Kind>): void;
    emitCommandWarnings?(info: DataAPIRequestInfo, warnings: DataAPIErrorDescriptor[], opts: ExecCmdOpts<Kind>): void;
};
type EmissionStrategies = {
    Normal: EmissionStrategy<'normal'>;
    Admin: EmissionStrategy<'admin'>;
};
/**
 * @internal
 */
export declare const EmissionStrategy: EmissionStrategies;
/**
 * @internal
 */
interface DataAPIHttpClientOpts<Kind extends ClientKind> extends HTTPClientOptions {
    keyspace: KeyspaceRef;
    emissionStrategy: EmissionStrategy<Kind>;
    embeddingHeaders: EmbeddingHeadersProvider;
    tokenProvider: TokenProvider | undefined;
}
/**
 * @internal
 */
export interface BigNumberHack {
    parseWithBigNumbers(json: string): boolean;
    parser: {
        parse: (json: string) => SomeDoc;
        stringify: (obj: SomeDoc) => string;
    };
}
/**
 * @internal
 */
export declare class DataAPIHttpClient<Kind extends ClientKind = 'normal'> extends HttpClient {
    #private;
    collection?: string;
    keyspace: KeyspaceRef;
    emissionStrategy: ReturnType<EmissionStrategy<Kind>>;
    bigNumHack?: BigNumberHack;
    constructor(props: DataAPIHttpClientOpts<Kind>);
    forTableSlashCollectionOrWhateverWeWouldCallTheUnionOfTheseTypes(keyspace: string, collection: string, opts: CollectionOptions | TableOptions | undefined, bigNumHack: BigNumberHack): DataAPIHttpClient;
    forDbAdmin(opts: AdminOptions | undefined): DataAPIHttpClient<'admin'>;
    executeCommand(command: Record<string, any>, options: ExecCmdOpts<Kind>): Promise<RawDataAPIResponse>;
}
export {};
