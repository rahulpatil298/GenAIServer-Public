import type { DataAPIClientEventMap, DataAPILoggingConfig, NormalizedLoggingConfig } from '../../lib/logging/types';
import type { CommandFailedEvent, CommandStartedEvent, CommandSucceededEvent, CommandWarningsEvent } from '../../documents';
import type { AdminCommandFailedEvent, AdminCommandPollingEvent, AdminCommandStartedEvent, AdminCommandSucceededEvent, AdminCommandWarningsEvent } from '../../administration';
import type TypedEventEmitter from 'typed-emitter';
interface ConsoleLike {
    log: (...args: any[]) => void;
    error: (...args: any[]) => void;
}
/**
 * @internal
 */
export declare class Logger implements Partial<Record<keyof DataAPIClientEventMap, unknown>> {
    private emitter;
    private console;
    commandStarted?: (...args: ConstructorParameters<typeof CommandStartedEvent>) => void;
    commandFailed?: (...args: ConstructorParameters<typeof CommandFailedEvent>) => void;
    commandWarnings?: (...args: ConstructorParameters<typeof CommandWarningsEvent>) => void;
    commandSucceeded?: (...args: ConstructorParameters<typeof CommandSucceededEvent>) => void;
    adminCommandFailed?: (...args: ConstructorParameters<typeof AdminCommandFailedEvent>) => void;
    adminCommandStarted?: (...args: ConstructorParameters<typeof AdminCommandStartedEvent>) => void;
    adminCommandPolling?: (...args: ConstructorParameters<typeof AdminCommandPollingEvent>) => void;
    adminCommandWarnings?: (...args: ConstructorParameters<typeof AdminCommandWarningsEvent>) => void;
    adminCommandSucceeded?: (...args: ConstructorParameters<typeof AdminCommandSucceededEvent>) => void;
    constructor(_config: NormalizedLoggingConfig[] | undefined, emitter: TypedEventEmitter<DataAPIClientEventMap>, console: ConsoleLike);
    static parseConfig: import("../validation").Parser<DataAPILoggingConfig | undefined>;
    static advanceConfig(config?: NormalizedLoggingConfig[], newConfig?: DataAPILoggingConfig): NormalizedLoggingConfig[] | undefined;
    private static normalizeLoggingConfig;
    private static buildInternalConfig;
}
export {};
