"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
// noinspection DuplicatedCode
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const constants_1 = require("../../lib/logging/constants");
const util_1 = require("../../lib/logging/util");
const parser_1 = require("../../lib/logging/parser");
class Logger {
    constructor(_config, emitter, console) {
        Object.defineProperty(this, "emitter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: emitter
        });
        Object.defineProperty(this, "console", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: console
        });
        Object.defineProperty(this, "commandStarted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "commandFailed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "commandWarnings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "commandSucceeded", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "adminCommandFailed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "adminCommandStarted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "adminCommandPolling", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "adminCommandWarnings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "adminCommandSucceeded", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        const config = Logger.buildInternalConfig(_config);
        for (const [_event, outputs] of Object.entries(config))
            if (outputs) {
                const event = _event;
                this[event] = (...args) => {
                    const eventClass = new constants_1.EventConstructors[event](...args);
                    if (outputs.event) {
                        this.emitter.emit(event, eventClass);
                    }
                    if (outputs.stdout) {
                        this.console.log(eventClass.formatted());
                    }
                    else if (outputs.stderr) {
                        this.console.error(eventClass.formatted());
                    }
                };
            }
    }
    static advanceConfig(config, newConfig) {
        if (!config && !newConfig) {
            return undefined;
        }
        if (!config) {
            return Logger.normalizeLoggingConfig(newConfig);
        }
        return [...config, ...Logger.normalizeLoggingConfig(newConfig)];
    }
    static normalizeLoggingConfig(config) {
        if (!config) {
            return [];
        }
        if (config === 'all') {
            return constants_1.DataAPILoggingDefaults;
        }
        if (typeof config === 'string') {
            return [{ events: [config], emits: constants_1.DataAPILoggingDefaultOutputs[config] }];
        }
        return config.flatMap((c, i) => {
            if (c === 'all') {
                return constants_1.DataAPILoggingDefaults;
            }
            if (typeof c === 'string') {
                return [{ events: [c], emits: constants_1.DataAPILoggingDefaultOutputs[c] }];
            }
            if (c.events === 'all' || Array.isArray(c.events) && c.events.includes('all')) {
                if (c.events === 'all' || c.events.length === 1 && c.events[0] === 'all') {
                    return [{ events: constants_1.LoggingEventsWithoutAll, emits: Array.isArray(c.emits) ? c.emits : [c.emits] }];
                }
                throw new Error(`Nonsensical logging configuration; can not have 'all' in a multi-element array (@ idx ${i})`);
            }
            return [{
                    events: Array.isArray(c.events) ? c.events : [c.events],
                    emits: Array.isArray(c.emits) ? c.emits : [c.emits],
                }];
        });
    }
    ;
    static buildInternalConfig(config) {
        const newConfig = { ...constants_1.EmptyInternalLoggingConfig };
        for (const layer of config ?? []) {
            for (const event of layer.events) {
                newConfig[event] = (0, util_1.buildOutputsMap)(layer.emits);
                if (newConfig[event]?.stdout && newConfig[event].stderr) {
                    throw new Error(`Nonsensical logging configuration; attempted to set both stdout and stderr outputs for '${event}'`);
                }
            }
        }
        return newConfig;
    }
}
exports.Logger = Logger;
Object.defineProperty(Logger, "parseConfig", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: parser_1.parseLoggingConfig
});
