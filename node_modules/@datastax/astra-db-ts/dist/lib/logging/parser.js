"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseLoggingConfig = void 0;
const validation_1 = require("../../lib/validation");
const utils_1 = require("../../lib/utils");
const constants_1 = require("../../lib/logging/constants");
const parseLoggingEvent = validation_1.p.mkStrEnumParser('DataAPILoggingEvent', constants_1.LoggingEvents, true);
const parseLoggingOutput = validation_1.p.mkStrEnumParser('DataAPILoggingOutput', constants_1.LoggingOutputs, true);
const parseLoggingConfig = (config, field) => {
    if ((0, utils_1.isNullish)(config)) {
        return undefined;
    }
    if (typeof config === 'string') {
        return parseLoggingEvent(config, `${field}`);
    }
    if (!Array.isArray(config)) {
        throw new TypeError(`Expected ${field} to be of type string | (string | object[]); got ${typeof config}`);
    }
    return config.map((c, i) => {
        if (c === null || c === undefined) {
            throw new TypeError(`Expected ${field}[${i}] to be non-null`);
        }
        if (typeof c === 'string') {
            return parseLoggingEvent(c, `${field}[${i}]`);
        }
        if (typeof c === 'object') {
            return parseExplicitLoggingConfig(c, `${field}[${i}]`);
        }
        throw new TypeError(`Expected ${field}[${i}] to be of type string | object; got ${typeof c}`);
    });
};
exports.parseLoggingConfig = parseLoggingConfig;
const parseExplicitLoggingConfig = (config, field) => {
    const events = parseLoggingConfigField(config.events, `${field}.events`, true, parseLoggingEvent);
    const emits = parseLoggingConfigField(config.emits, `${field}.emits`, false, parseLoggingOutput);
    return { events, emits };
};
const parseLoggingConfigField = (value, field, reqNonEmpty, parser) => {
    if (typeof value === 'string') {
        return parser(value, field);
    }
    if (!Array.isArray(value)) {
        throw new TypeError(`Expected ${field} to be a string or an array of strings; got ${typeof value}`);
    }
    if (reqNonEmpty && !(0, validation_1.isNonEmpty)(value)) {
        throw new Error(`Expected ${field} to be non-empty`);
    }
    return value.map((e, i) => {
        return parser(e, `${field}[${i}]`);
    });
};
