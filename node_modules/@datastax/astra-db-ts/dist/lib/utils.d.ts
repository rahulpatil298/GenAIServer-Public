import { DataAPIEnvironment, nullish } from '../lib/types';
import JBI from 'json-bigint';
import { SomeDoc } from '../documents';
/**
 * @internal
 */
export declare function isNullish(t: unknown): t is nullish;
/**
 * @internal
 */
export declare function validateDataAPIEnv(env: unknown): asserts env is DataAPIEnvironment | nullish;
/**
 * @internal
 */
export declare function jsonTryParse<T>(json: string, otherwise: T, reviver?: (this: unknown, key: string, value: unknown) => unknown): T;
/**
 * @internal
 */
export declare function buildAstraEndpoint(id: string, region: string, env?: 'dev' | 'test' | 'prod'): string;
/**
 * @internal
 */
export declare function toArray<T>(t: T | readonly T[]): readonly T[];
/**
 * @internal
 */
export declare function withJbiNullProtoFix(jbi: {
    parse: typeof JBI['parse'];
    stringify: typeof JBI['stringify'];
}): {
    parse: (str: string) => SomeDoc;
    stringify: {
        (value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
        (value: any, replacer?: (number | string)[] | null, space?: string | number): string;
    };
};
export declare function camelToSnakeCase(camel: string, cache: Record<string, string>): string;
export declare function snakeToCamelCase(snake: string, cache: Record<string, string>): string;
export declare function stringArraysEqual(a: readonly string[], b: readonly string[]): boolean;
