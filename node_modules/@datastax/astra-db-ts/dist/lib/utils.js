"use strict";
// Copyright Datastax, Inc
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNullish = isNullish;
exports.validateDataAPIEnv = validateDataAPIEnv;
exports.jsonTryParse = jsonTryParse;
exports.buildAstraEndpoint = buildAstraEndpoint;
exports.toArray = toArray;
exports.withJbiNullProtoFix = withJbiNullProtoFix;
exports.camelToSnakeCase = camelToSnakeCase;
exports.snakeToCamelCase = snakeToCamelCase;
exports.stringArraysEqual = stringArraysEqual;
const constants_1 = require("../lib/constants");
function isNullish(t) {
    return t === null || t === undefined;
}
function validateDataAPIEnv(env) {
    if (!isNullish(env) && !constants_1.DataAPIEnvironments.includes(env)) {
        throw new Error(`Given environment is invalid (must be ${constants_1.DataAPIEnvironments.map(e => `"${e}"`).join(', ')}, or nullish to default to "astra".`);
    }
}
function jsonTryParse(json, otherwise, reviver) {
    try {
        return JSON.parse(json, reviver);
    }
    catch (_) {
        return otherwise;
    }
}
function buildAstraEndpoint(id, region, env = 'prod') {
    return 'https://' + id + '-' + region + `.apps${env === 'prod' ? '' : `-${env}`}.astra.datastax.com`;
}
function toArray(t) {
    return Array.isArray(t) ? t : [t];
}
function withJbiNullProtoFix(jbi) {
    return {
        parse: (str) => nullProtoFix(jbi.parse(str)),
        stringify: jbi.stringify,
    };
}
function nullProtoFix(doc) {
    if (Array.isArray(doc)) {
        for (let i = 0; i < doc.length; i++) {
            if (typeof doc[i] === 'object' && doc[i] !== null) {
                doc[i] = nullProtoFix(doc[i]);
            }
        }
    }
    else {
        doc = Object.assign({}, doc);
        for (const key of Object.keys(doc)) {
            if (typeof doc[key] === 'object' && doc[key] !== null) {
                doc[key] = nullProtoFix(doc[key]);
            }
        }
    }
    return doc;
}
function camelToSnakeCase(camel, cache) {
    if (cache[camel]) {
        return cache[camel];
    }
    if (!camel) {
        return '';
    }
    return cache[camel] = camel[0] + camel.slice(1).replace(/[A-Z]/g, (letter, index) => `${index ? '_' : ''}${letter.toLowerCase()}`);
}
function snakeToCamelCase(snake, cache) {
    if (cache[snake]) {
        return cache[snake];
    }
    if (!snake) {
        return '';
    }
    return cache[snake] = snake[0] + snake.slice(1).replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
}
function stringArraysEqual(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
}
